                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.8.0 #5117 (Mar 23 2008) (MINGW32)
                              4 ; This file was generated Sun Jan 30 19:17:26 2011
                              5 ;--------------------------------------------------------
                              6 	.module dm9000
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _PHY_write
                             13 	.globl _P7_7
                             14 	.globl _P7_6
                             15 	.globl _P7_5
                             16 	.globl _P7_4
                             17 	.globl _P7_3
                             18 	.globl _P7_2
                             19 	.globl _P7_1
                             20 	.globl _P7_0
                             21 	.globl _SPIF
                             22 	.globl _WCOL
                             23 	.globl _MODF
                             24 	.globl _RXOVRN
                             25 	.globl _NSSMD1
                             26 	.globl _NSSMD0
                             27 	.globl _TXBMT
                             28 	.globl _SPIEN
                             29 	.globl _P6_7
                             30 	.globl _P6_6
                             31 	.globl _P6_5
                             32 	.globl _P6_4
                             33 	.globl _P6_3
                             34 	.globl _P6_2
                             35 	.globl _P6_1
                             36 	.globl _P6_0
                             37 	.globl _AD2EN
                             38 	.globl _AD2TM
                             39 	.globl _AD2INT
                             40 	.globl _AD2BUSY
                             41 	.globl _AD2CM2
                             42 	.globl _AD2CM1
                             43 	.globl _AD2CM0
                             44 	.globl _AD2WINT
                             45 	.globl _AD0EN
                             46 	.globl _AD0TM
                             47 	.globl _AD0INT
                             48 	.globl _AD0BUSY
                             49 	.globl _AD0CM1
                             50 	.globl _AD0CM0
                             51 	.globl _AD0WINT
                             52 	.globl _AD0LJST
                             53 	.globl _P5_7
                             54 	.globl _P5_6
                             55 	.globl _P5_5
                             56 	.globl _P5_4
                             57 	.globl _P5_3
                             58 	.globl _P5_2
                             59 	.globl _P5_1
                             60 	.globl _P5_0
                             61 	.globl _CF
                             62 	.globl _CR
                             63 	.globl _CCF5
                             64 	.globl _CCF4
                             65 	.globl _CCF3
                             66 	.globl _CCF2
                             67 	.globl _CCF1
                             68 	.globl _CCF0
                             69 	.globl _CY
                             70 	.globl _AC
                             71 	.globl _F0
                             72 	.globl _RS1
                             73 	.globl _RS0
                             74 	.globl _OV
                             75 	.globl _F1
                             76 	.globl _P
                             77 	.globl _P4_7
                             78 	.globl _P4_6
                             79 	.globl _P4_5
                             80 	.globl _P4_4
                             81 	.globl _P4_3
                             82 	.globl _P4_2
                             83 	.globl _P4_1
                             84 	.globl _P4_0
                             85 	.globl _TF4
                             86 	.globl _EXF4
                             87 	.globl _EXEN4
                             88 	.globl _TR4
                             89 	.globl _CT4
                             90 	.globl _CPRL4
                             91 	.globl _TF3
                             92 	.globl _EXF3
                             93 	.globl _EXEN3
                             94 	.globl _TR3
                             95 	.globl _CT3
                             96 	.globl _CPRL3
                             97 	.globl _TF2
                             98 	.globl _EXF2
                             99 	.globl _EXEN2
                            100 	.globl _TR2
                            101 	.globl _CT2
                            102 	.globl _CPRL2
                            103 	.globl _MAC0HO
                            104 	.globl _MAC0Z
                            105 	.globl _MAC0SO
                            106 	.globl _MAC0N
                            107 	.globl _BUSY
                            108 	.globl _ENSMB
                            109 	.globl _STA
                            110 	.globl _STO
                            111 	.globl _SI
                            112 	.globl _AA
                            113 	.globl _SMBFTE
                            114 	.globl _SMBTOE
                            115 	.globl _PT2
                            116 	.globl _PS
                            117 	.globl _PS0
                            118 	.globl _PT1
                            119 	.globl _PX1
                            120 	.globl _PT0
                            121 	.globl _PX0
                            122 	.globl _P3_7
                            123 	.globl _P3_6
                            124 	.globl _P3_5
                            125 	.globl _P3_4
                            126 	.globl _P3_3
                            127 	.globl _P3_2
                            128 	.globl _P3_1
                            129 	.globl _P3_0
                            130 	.globl _EA
                            131 	.globl _ET2
                            132 	.globl _ES
                            133 	.globl _ES0
                            134 	.globl _ET1
                            135 	.globl _EX1
                            136 	.globl _ET0
                            137 	.globl _EX0
                            138 	.globl _P2_7
                            139 	.globl _P2_6
                            140 	.globl _P2_5
                            141 	.globl _P2_4
                            142 	.globl _P2_3
                            143 	.globl _P2_2
                            144 	.globl _P2_1
                            145 	.globl _P2_0
                            146 	.globl _S1MODE
                            147 	.globl _MCE1
                            148 	.globl _REN1
                            149 	.globl _TB81
                            150 	.globl _RB81
                            151 	.globl _TI1
                            152 	.globl _RI1
                            153 	.globl _SM00
                            154 	.globl _SM10
                            155 	.globl _SM20
                            156 	.globl _REN
                            157 	.globl _REN0
                            158 	.globl _TB80
                            159 	.globl _RB80
                            160 	.globl _TI
                            161 	.globl _TI0
                            162 	.globl _RI
                            163 	.globl _RI0
                            164 	.globl _P1_7
                            165 	.globl _P1_6
                            166 	.globl _P1_5
                            167 	.globl _P1_4
                            168 	.globl _P1_3
                            169 	.globl _P1_2
                            170 	.globl _P1_1
                            171 	.globl _P1_0
                            172 	.globl _FLHBUSY
                            173 	.globl _CP1EN
                            174 	.globl _CP1OUT
                            175 	.globl _CP1RIF
                            176 	.globl _CP1FIF
                            177 	.globl _CP1HYP1
                            178 	.globl _CP1HYP0
                            179 	.globl _CP1HYN1
                            180 	.globl _CP1HYN0
                            181 	.globl _CP0EN
                            182 	.globl _CP0OUT
                            183 	.globl _CP0RIF
                            184 	.globl _CP0FIF
                            185 	.globl _CP0HYP1
                            186 	.globl _CP0HYP0
                            187 	.globl _CP0HYN1
                            188 	.globl _CP0HYN0
                            189 	.globl _TF1
                            190 	.globl _TR1
                            191 	.globl _TF0
                            192 	.globl _TR0
                            193 	.globl _IE1
                            194 	.globl _IT1
                            195 	.globl _IE0
                            196 	.globl _IT0
                            197 	.globl _P0_7
                            198 	.globl _P0_6
                            199 	.globl _P0_5
                            200 	.globl _P0_4
                            201 	.globl _P0_3
                            202 	.globl _P0_2
                            203 	.globl _P0_1
                            204 	.globl _P0_0
                            205 	.globl _MAC0RND
                            206 	.globl _MAC0ACC
                            207 	.globl _MAC0A
                            208 	.globl _RCAP4
                            209 	.globl _TMR4
                            210 	.globl _DAC1
                            211 	.globl _RCAP3
                            212 	.globl _TMR3
                            213 	.globl _PCA0CP5
                            214 	.globl _PCA0CP4
                            215 	.globl _PCA0CP3
                            216 	.globl _PCA0CP2
                            217 	.globl _PCA0CP1
                            218 	.globl _PCA0CP0
                            219 	.globl _PCA0
                            220 	.globl _DAC0
                            221 	.globl _ADC0LT
                            222 	.globl _ADC0GT
                            223 	.globl _ADC0
                            224 	.globl _RCAP2
                            225 	.globl _TMR2
                            226 	.globl _TMR1
                            227 	.globl _TMR0
                            228 	.globl _P7
                            229 	.globl _P6
                            230 	.globl _XBR2
                            231 	.globl _XBR1
                            232 	.globl _XBR0
                            233 	.globl _P5
                            234 	.globl _P4
                            235 	.globl _FLACL
                            236 	.globl _P1MDIN
                            237 	.globl _P3MDOUT
                            238 	.globl _P2MDOUT
                            239 	.globl _P1MDOUT
                            240 	.globl _P0MDOUT
                            241 	.globl _CCH0LC
                            242 	.globl _CCH0TN
                            243 	.globl _CCH0CN
                            244 	.globl _P7MDOUT
                            245 	.globl _P6MDOUT
                            246 	.globl _P5MDOUT
                            247 	.globl _P4MDOUT
                            248 	.globl _CCH0MA
                            249 	.globl _CLKSEL
                            250 	.globl _SFRPGCN
                            251 	.globl _PLL0FLT
                            252 	.globl _PLL0MUL
                            253 	.globl _PLL0DIV
                            254 	.globl _OSCXCN
                            255 	.globl _OSCICL
                            256 	.globl _OSCICN
                            257 	.globl _PLL0CN
                            258 	.globl _FLSTAT
                            259 	.globl _MAC0RNDH
                            260 	.globl _MAC0RNDL
                            261 	.globl _MAC0CF
                            262 	.globl _MAC0AH
                            263 	.globl _MAC0AL
                            264 	.globl _MAC0STA
                            265 	.globl _MAC0OVR
                            266 	.globl _MAC0ACC3
                            267 	.globl _MAC0ACC2
                            268 	.globl _MAC0ACC1
                            269 	.globl _MAC0ACC0
                            270 	.globl _MAC0BH
                            271 	.globl _MAC0BL
                            272 	.globl _ADC2CN
                            273 	.globl _TMR4H
                            274 	.globl _TMR4L
                            275 	.globl _RCAP4H
                            276 	.globl _RCAP4L
                            277 	.globl _TMR4CF
                            278 	.globl _TMR4CN
                            279 	.globl _ADC2LT
                            280 	.globl _ADC2GT
                            281 	.globl _ADC2
                            282 	.globl _ADC2CF
                            283 	.globl _AMX2SL
                            284 	.globl _AMX2CF
                            285 	.globl _CPT1MD
                            286 	.globl _CPT1CN
                            287 	.globl _DAC1CN
                            288 	.globl _DAC1H
                            289 	.globl _DAC1L
                            290 	.globl _TMR3H
                            291 	.globl _TMR3L
                            292 	.globl _RCAP3H
                            293 	.globl _RCAP3L
                            294 	.globl _TMR3CF
                            295 	.globl _TMR3CN
                            296 	.globl _SBUF1
                            297 	.globl _SCON1
                            298 	.globl _CPT0MD
                            299 	.globl _CPT0CN
                            300 	.globl _PCA0CPH1
                            301 	.globl _PCA0CPL1
                            302 	.globl _PCA0CPH0
                            303 	.globl _PCA0CPL0
                            304 	.globl _PCA0H
                            305 	.globl _PCA0L
                            306 	.globl _SPI0CN
                            307 	.globl _RSTSRC
                            308 	.globl _PCA0CPH4
                            309 	.globl _PCA0CPL4
                            310 	.globl _PCA0CPH3
                            311 	.globl _PCA0CPL3
                            312 	.globl _PCA0CPH2
                            313 	.globl _PCA0CPL2
                            314 	.globl _ADC0CN
                            315 	.globl _PCA0CPH5
                            316 	.globl _PCA0CPL5
                            317 	.globl _PCA0CPM5
                            318 	.globl _PCA0CPM4
                            319 	.globl _PCA0CPM3
                            320 	.globl _PCA0CPM2
                            321 	.globl _PCA0CPM1
                            322 	.globl _PCA0CPM0
                            323 	.globl _PCA0MD
                            324 	.globl _PCA0CN
                            325 	.globl _DAC0CN
                            326 	.globl _DAC0H
                            327 	.globl _DAC0L
                            328 	.globl _REF0CN
                            329 	.globl _SMB0CR
                            330 	.globl _TH2
                            331 	.globl _TMR2H
                            332 	.globl _TL2
                            333 	.globl _TMR2L
                            334 	.globl _RCAP2H
                            335 	.globl _RCAP2L
                            336 	.globl _TMR2CF
                            337 	.globl _TMR2CN
                            338 	.globl _ADC0LTH
                            339 	.globl _ADC0LTL
                            340 	.globl _ADC0GTH
                            341 	.globl _ADC0GTL
                            342 	.globl _SMB0ADR
                            343 	.globl _SMB0DAT
                            344 	.globl _SMB0STA
                            345 	.globl _SMB0CN
                            346 	.globl _ADC0H
                            347 	.globl _ADC0L
                            348 	.globl _ADC0CF
                            349 	.globl _AMX0SL
                            350 	.globl _AMX0CF
                            351 	.globl _SADEN0
                            352 	.globl _FLSCL
                            353 	.globl _SADDR0
                            354 	.globl _EMI0CF
                            355 	.globl __XPAGE
                            356 	.globl _EMI0CN
                            357 	.globl _EMI0TC
                            358 	.globl _SPI0CKR
                            359 	.globl _SPI0DAT
                            360 	.globl _SPI0CFG
                            361 	.globl _SBUF
                            362 	.globl _SBUF0
                            363 	.globl _SCON
                            364 	.globl _SCON0
                            365 	.globl _SSTA0
                            366 	.globl _PSCTL
                            367 	.globl _CKCON
                            368 	.globl _TH1
                            369 	.globl _TH0
                            370 	.globl _TL1
                            371 	.globl _TL0
                            372 	.globl _TMOD
                            373 	.globl _TCON
                            374 	.globl _WDTCN
                            375 	.globl _EIP2
                            376 	.globl _EIP1
                            377 	.globl _B
                            378 	.globl _EIE2
                            379 	.globl _EIE1
                            380 	.globl _ACC
                            381 	.globl _PSW
                            382 	.globl _IP
                            383 	.globl _PSBANK
                            384 	.globl _P3
                            385 	.globl _IE
                            386 	.globl _P2
                            387 	.globl _P1
                            388 	.globl _PCON
                            389 	.globl _SFRLAST
                            390 	.globl _SFRNEXT
                            391 	.globl _SFRPAGE
                            392 	.globl _DPH
                            393 	.globl _DPL
                            394 	.globl _SP
                            395 	.globl _P0
                            396 	.globl _PHY_write_PARM_2
                            397 	.globl _write_nicreg_PARM_2
                            398 	.globl _NIC_DAT
                            399 	.globl _NIC_REG
                            400 	.globl _write_nicreg
                            401 	.globl _write_nicdata
                            402 	.globl _set_nicreg
                            403 	.globl _read_nicreg
                            404 	.globl _read_nicdata
                            405 	.globl _InitDM9000
                            406 	.globl _DM9000_receive
                            407 	.globl _tcpip_output
                            408 	.globl _DM9000_transmit
                            409 ;--------------------------------------------------------
                            410 ; special function registers
                            411 ;--------------------------------------------------------
                            412 	.area RSEG    (DATA)
                    0080    413 G$P0$0$0 == 0x0080
                    0080    414 _P0	=	0x0080
                    0081    415 G$SP$0$0 == 0x0081
                    0081    416 _SP	=	0x0081
                    0082    417 G$DPL$0$0 == 0x0082
                    0082    418 _DPL	=	0x0082
                    0083    419 G$DPH$0$0 == 0x0083
                    0083    420 _DPH	=	0x0083
                    0084    421 G$SFRPAGE$0$0 == 0x0084
                    0084    422 _SFRPAGE	=	0x0084
                    0085    423 G$SFRNEXT$0$0 == 0x0085
                    0085    424 _SFRNEXT	=	0x0085
                    0086    425 G$SFRLAST$0$0 == 0x0086
                    0086    426 _SFRLAST	=	0x0086
                    0087    427 G$PCON$0$0 == 0x0087
                    0087    428 _PCON	=	0x0087
                    0090    429 G$P1$0$0 == 0x0090
                    0090    430 _P1	=	0x0090
                    00A0    431 G$P2$0$0 == 0x00a0
                    00A0    432 _P2	=	0x00a0
                    00A8    433 G$IE$0$0 == 0x00a8
                    00A8    434 _IE	=	0x00a8
                    00B0    435 G$P3$0$0 == 0x00b0
                    00B0    436 _P3	=	0x00b0
                    00B1    437 G$PSBANK$0$0 == 0x00b1
                    00B1    438 _PSBANK	=	0x00b1
                    00B8    439 G$IP$0$0 == 0x00b8
                    00B8    440 _IP	=	0x00b8
                    00D0    441 G$PSW$0$0 == 0x00d0
                    00D0    442 _PSW	=	0x00d0
                    00E0    443 G$ACC$0$0 == 0x00e0
                    00E0    444 _ACC	=	0x00e0
                    00E6    445 G$EIE1$0$0 == 0x00e6
                    00E6    446 _EIE1	=	0x00e6
                    00E7    447 G$EIE2$0$0 == 0x00e7
                    00E7    448 _EIE2	=	0x00e7
                    00F0    449 G$B$0$0 == 0x00f0
                    00F0    450 _B	=	0x00f0
                    00F6    451 G$EIP1$0$0 == 0x00f6
                    00F6    452 _EIP1	=	0x00f6
                    00F7    453 G$EIP2$0$0 == 0x00f7
                    00F7    454 _EIP2	=	0x00f7
                    00FF    455 G$WDTCN$0$0 == 0x00ff
                    00FF    456 _WDTCN	=	0x00ff
                    0088    457 G$TCON$0$0 == 0x0088
                    0088    458 _TCON	=	0x0088
                    0089    459 G$TMOD$0$0 == 0x0089
                    0089    460 _TMOD	=	0x0089
                    008A    461 G$TL0$0$0 == 0x008a
                    008A    462 _TL0	=	0x008a
                    008B    463 G$TL1$0$0 == 0x008b
                    008B    464 _TL1	=	0x008b
                    008C    465 G$TH0$0$0 == 0x008c
                    008C    466 _TH0	=	0x008c
                    008D    467 G$TH1$0$0 == 0x008d
                    008D    468 _TH1	=	0x008d
                    008E    469 G$CKCON$0$0 == 0x008e
                    008E    470 _CKCON	=	0x008e
                    008F    471 G$PSCTL$0$0 == 0x008f
                    008F    472 _PSCTL	=	0x008f
                    0091    473 G$SSTA0$0$0 == 0x0091
                    0091    474 _SSTA0	=	0x0091
                    0098    475 G$SCON0$0$0 == 0x0098
                    0098    476 _SCON0	=	0x0098
                    0098    477 G$SCON$0$0 == 0x0098
                    0098    478 _SCON	=	0x0098
                    0099    479 G$SBUF0$0$0 == 0x0099
                    0099    480 _SBUF0	=	0x0099
                    0099    481 G$SBUF$0$0 == 0x0099
                    0099    482 _SBUF	=	0x0099
                    009A    483 G$SPI0CFG$0$0 == 0x009a
                    009A    484 _SPI0CFG	=	0x009a
                    009B    485 G$SPI0DAT$0$0 == 0x009b
                    009B    486 _SPI0DAT	=	0x009b
                    009D    487 G$SPI0CKR$0$0 == 0x009d
                    009D    488 _SPI0CKR	=	0x009d
                    00A1    489 G$EMI0TC$0$0 == 0x00a1
                    00A1    490 _EMI0TC	=	0x00a1
                    00A2    491 G$EMI0CN$0$0 == 0x00a2
                    00A2    492 _EMI0CN	=	0x00a2
                    00A2    493 G$_XPAGE$0$0 == 0x00a2
                    00A2    494 __XPAGE	=	0x00a2
                    00A3    495 G$EMI0CF$0$0 == 0x00a3
                    00A3    496 _EMI0CF	=	0x00a3
                    00A9    497 G$SADDR0$0$0 == 0x00a9
                    00A9    498 _SADDR0	=	0x00a9
                    00B7    499 G$FLSCL$0$0 == 0x00b7
                    00B7    500 _FLSCL	=	0x00b7
                    00B9    501 G$SADEN0$0$0 == 0x00b9
                    00B9    502 _SADEN0	=	0x00b9
                    00BA    503 G$AMX0CF$0$0 == 0x00ba
                    00BA    504 _AMX0CF	=	0x00ba
                    00BB    505 G$AMX0SL$0$0 == 0x00bb
                    00BB    506 _AMX0SL	=	0x00bb
                    00BC    507 G$ADC0CF$0$0 == 0x00bc
                    00BC    508 _ADC0CF	=	0x00bc
                    00BE    509 G$ADC0L$0$0 == 0x00be
                    00BE    510 _ADC0L	=	0x00be
                    00BF    511 G$ADC0H$0$0 == 0x00bf
                    00BF    512 _ADC0H	=	0x00bf
                    00C0    513 G$SMB0CN$0$0 == 0x00c0
                    00C0    514 _SMB0CN	=	0x00c0
                    00C1    515 G$SMB0STA$0$0 == 0x00c1
                    00C1    516 _SMB0STA	=	0x00c1
                    00C2    517 G$SMB0DAT$0$0 == 0x00c2
                    00C2    518 _SMB0DAT	=	0x00c2
                    00C3    519 G$SMB0ADR$0$0 == 0x00c3
                    00C3    520 _SMB0ADR	=	0x00c3
                    00C4    521 G$ADC0GTL$0$0 == 0x00c4
                    00C4    522 _ADC0GTL	=	0x00c4
                    00C5    523 G$ADC0GTH$0$0 == 0x00c5
                    00C5    524 _ADC0GTH	=	0x00c5
                    00C6    525 G$ADC0LTL$0$0 == 0x00c6
                    00C6    526 _ADC0LTL	=	0x00c6
                    00C7    527 G$ADC0LTH$0$0 == 0x00c7
                    00C7    528 _ADC0LTH	=	0x00c7
                    00C8    529 G$TMR2CN$0$0 == 0x00c8
                    00C8    530 _TMR2CN	=	0x00c8
                    00C9    531 G$TMR2CF$0$0 == 0x00c9
                    00C9    532 _TMR2CF	=	0x00c9
                    00CA    533 G$RCAP2L$0$0 == 0x00ca
                    00CA    534 _RCAP2L	=	0x00ca
                    00CB    535 G$RCAP2H$0$0 == 0x00cb
                    00CB    536 _RCAP2H	=	0x00cb
                    00CC    537 G$TMR2L$0$0 == 0x00cc
                    00CC    538 _TMR2L	=	0x00cc
                    00CC    539 G$TL2$0$0 == 0x00cc
                    00CC    540 _TL2	=	0x00cc
                    00CD    541 G$TMR2H$0$0 == 0x00cd
                    00CD    542 _TMR2H	=	0x00cd
                    00CD    543 G$TH2$0$0 == 0x00cd
                    00CD    544 _TH2	=	0x00cd
                    00CF    545 G$SMB0CR$0$0 == 0x00cf
                    00CF    546 _SMB0CR	=	0x00cf
                    00D1    547 G$REF0CN$0$0 == 0x00d1
                    00D1    548 _REF0CN	=	0x00d1
                    00D2    549 G$DAC0L$0$0 == 0x00d2
                    00D2    550 _DAC0L	=	0x00d2
                    00D3    551 G$DAC0H$0$0 == 0x00d3
                    00D3    552 _DAC0H	=	0x00d3
                    00D4    553 G$DAC0CN$0$0 == 0x00d4
                    00D4    554 _DAC0CN	=	0x00d4
                    00D8    555 G$PCA0CN$0$0 == 0x00d8
                    00D8    556 _PCA0CN	=	0x00d8
                    00D9    557 G$PCA0MD$0$0 == 0x00d9
                    00D9    558 _PCA0MD	=	0x00d9
                    00DA    559 G$PCA0CPM0$0$0 == 0x00da
                    00DA    560 _PCA0CPM0	=	0x00da
                    00DB    561 G$PCA0CPM1$0$0 == 0x00db
                    00DB    562 _PCA0CPM1	=	0x00db
                    00DC    563 G$PCA0CPM2$0$0 == 0x00dc
                    00DC    564 _PCA0CPM2	=	0x00dc
                    00DD    565 G$PCA0CPM3$0$0 == 0x00dd
                    00DD    566 _PCA0CPM3	=	0x00dd
                    00DE    567 G$PCA0CPM4$0$0 == 0x00de
                    00DE    568 _PCA0CPM4	=	0x00de
                    00DF    569 G$PCA0CPM5$0$0 == 0x00df
                    00DF    570 _PCA0CPM5	=	0x00df
                    00E1    571 G$PCA0CPL5$0$0 == 0x00e1
                    00E1    572 _PCA0CPL5	=	0x00e1
                    00E2    573 G$PCA0CPH5$0$0 == 0x00e2
                    00E2    574 _PCA0CPH5	=	0x00e2
                    00E8    575 G$ADC0CN$0$0 == 0x00e8
                    00E8    576 _ADC0CN	=	0x00e8
                    00E9    577 G$PCA0CPL2$0$0 == 0x00e9
                    00E9    578 _PCA0CPL2	=	0x00e9
                    00EA    579 G$PCA0CPH2$0$0 == 0x00ea
                    00EA    580 _PCA0CPH2	=	0x00ea
                    00EB    581 G$PCA0CPL3$0$0 == 0x00eb
                    00EB    582 _PCA0CPL3	=	0x00eb
                    00EC    583 G$PCA0CPH3$0$0 == 0x00ec
                    00EC    584 _PCA0CPH3	=	0x00ec
                    00ED    585 G$PCA0CPL4$0$0 == 0x00ed
                    00ED    586 _PCA0CPL4	=	0x00ed
                    00EE    587 G$PCA0CPH4$0$0 == 0x00ee
                    00EE    588 _PCA0CPH4	=	0x00ee
                    00EF    589 G$RSTSRC$0$0 == 0x00ef
                    00EF    590 _RSTSRC	=	0x00ef
                    00F8    591 G$SPI0CN$0$0 == 0x00f8
                    00F8    592 _SPI0CN	=	0x00f8
                    00F9    593 G$PCA0L$0$0 == 0x00f9
                    00F9    594 _PCA0L	=	0x00f9
                    00FA    595 G$PCA0H$0$0 == 0x00fa
                    00FA    596 _PCA0H	=	0x00fa
                    00FB    597 G$PCA0CPL0$0$0 == 0x00fb
                    00FB    598 _PCA0CPL0	=	0x00fb
                    00FC    599 G$PCA0CPH0$0$0 == 0x00fc
                    00FC    600 _PCA0CPH0	=	0x00fc
                    00FD    601 G$PCA0CPL1$0$0 == 0x00fd
                    00FD    602 _PCA0CPL1	=	0x00fd
                    00FE    603 G$PCA0CPH1$0$0 == 0x00fe
                    00FE    604 _PCA0CPH1	=	0x00fe
                    0088    605 G$CPT0CN$0$0 == 0x0088
                    0088    606 _CPT0CN	=	0x0088
                    0089    607 G$CPT0MD$0$0 == 0x0089
                    0089    608 _CPT0MD	=	0x0089
                    0098    609 G$SCON1$0$0 == 0x0098
                    0098    610 _SCON1	=	0x0098
                    0099    611 G$SBUF1$0$0 == 0x0099
                    0099    612 _SBUF1	=	0x0099
                    00C8    613 G$TMR3CN$0$0 == 0x00c8
                    00C8    614 _TMR3CN	=	0x00c8
                    00C9    615 G$TMR3CF$0$0 == 0x00c9
                    00C9    616 _TMR3CF	=	0x00c9
                    00CA    617 G$RCAP3L$0$0 == 0x00ca
                    00CA    618 _RCAP3L	=	0x00ca
                    00CB    619 G$RCAP3H$0$0 == 0x00cb
                    00CB    620 _RCAP3H	=	0x00cb
                    00CC    621 G$TMR3L$0$0 == 0x00cc
                    00CC    622 _TMR3L	=	0x00cc
                    00CD    623 G$TMR3H$0$0 == 0x00cd
                    00CD    624 _TMR3H	=	0x00cd
                    00D2    625 G$DAC1L$0$0 == 0x00d2
                    00D2    626 _DAC1L	=	0x00d2
                    00D3    627 G$DAC1H$0$0 == 0x00d3
                    00D3    628 _DAC1H	=	0x00d3
                    00D4    629 G$DAC1CN$0$0 == 0x00d4
                    00D4    630 _DAC1CN	=	0x00d4
                    0088    631 G$CPT1CN$0$0 == 0x0088
                    0088    632 _CPT1CN	=	0x0088
                    0089    633 G$CPT1MD$0$0 == 0x0089
                    0089    634 _CPT1MD	=	0x0089
                    00BA    635 G$AMX2CF$0$0 == 0x00ba
                    00BA    636 _AMX2CF	=	0x00ba
                    00BB    637 G$AMX2SL$0$0 == 0x00bb
                    00BB    638 _AMX2SL	=	0x00bb
                    00BC    639 G$ADC2CF$0$0 == 0x00bc
                    00BC    640 _ADC2CF	=	0x00bc
                    00BE    641 G$ADC2$0$0 == 0x00be
                    00BE    642 _ADC2	=	0x00be
                    00C4    643 G$ADC2GT$0$0 == 0x00c4
                    00C4    644 _ADC2GT	=	0x00c4
                    00C6    645 G$ADC2LT$0$0 == 0x00c6
                    00C6    646 _ADC2LT	=	0x00c6
                    00C8    647 G$TMR4CN$0$0 == 0x00c8
                    00C8    648 _TMR4CN	=	0x00c8
                    00C9    649 G$TMR4CF$0$0 == 0x00c9
                    00C9    650 _TMR4CF	=	0x00c9
                    00CA    651 G$RCAP4L$0$0 == 0x00ca
                    00CA    652 _RCAP4L	=	0x00ca
                    00CB    653 G$RCAP4H$0$0 == 0x00cb
                    00CB    654 _RCAP4H	=	0x00cb
                    00CC    655 G$TMR4L$0$0 == 0x00cc
                    00CC    656 _TMR4L	=	0x00cc
                    00CD    657 G$TMR4H$0$0 == 0x00cd
                    00CD    658 _TMR4H	=	0x00cd
                    00E8    659 G$ADC2CN$0$0 == 0x00e8
                    00E8    660 _ADC2CN	=	0x00e8
                    0091    661 G$MAC0BL$0$0 == 0x0091
                    0091    662 _MAC0BL	=	0x0091
                    0092    663 G$MAC0BH$0$0 == 0x0092
                    0092    664 _MAC0BH	=	0x0092
                    0093    665 G$MAC0ACC0$0$0 == 0x0093
                    0093    666 _MAC0ACC0	=	0x0093
                    0094    667 G$MAC0ACC1$0$0 == 0x0094
                    0094    668 _MAC0ACC1	=	0x0094
                    0095    669 G$MAC0ACC2$0$0 == 0x0095
                    0095    670 _MAC0ACC2	=	0x0095
                    0096    671 G$MAC0ACC3$0$0 == 0x0096
                    0096    672 _MAC0ACC3	=	0x0096
                    0097    673 G$MAC0OVR$0$0 == 0x0097
                    0097    674 _MAC0OVR	=	0x0097
                    00C0    675 G$MAC0STA$0$0 == 0x00c0
                    00C0    676 _MAC0STA	=	0x00c0
                    00C1    677 G$MAC0AL$0$0 == 0x00c1
                    00C1    678 _MAC0AL	=	0x00c1
                    00C2    679 G$MAC0AH$0$0 == 0x00c2
                    00C2    680 _MAC0AH	=	0x00c2
                    00C3    681 G$MAC0CF$0$0 == 0x00c3
                    00C3    682 _MAC0CF	=	0x00c3
                    00CE    683 G$MAC0RNDL$0$0 == 0x00ce
                    00CE    684 _MAC0RNDL	=	0x00ce
                    00CF    685 G$MAC0RNDH$0$0 == 0x00cf
                    00CF    686 _MAC0RNDH	=	0x00cf
                    0088    687 G$FLSTAT$0$0 == 0x0088
                    0088    688 _FLSTAT	=	0x0088
                    0089    689 G$PLL0CN$0$0 == 0x0089
                    0089    690 _PLL0CN	=	0x0089
                    008A    691 G$OSCICN$0$0 == 0x008a
                    008A    692 _OSCICN	=	0x008a
                    008B    693 G$OSCICL$0$0 == 0x008b
                    008B    694 _OSCICL	=	0x008b
                    008C    695 G$OSCXCN$0$0 == 0x008c
                    008C    696 _OSCXCN	=	0x008c
                    008D    697 G$PLL0DIV$0$0 == 0x008d
                    008D    698 _PLL0DIV	=	0x008d
                    008E    699 G$PLL0MUL$0$0 == 0x008e
                    008E    700 _PLL0MUL	=	0x008e
                    008F    701 G$PLL0FLT$0$0 == 0x008f
                    008F    702 _PLL0FLT	=	0x008f
                    0096    703 G$SFRPGCN$0$0 == 0x0096
                    0096    704 _SFRPGCN	=	0x0096
                    0097    705 G$CLKSEL$0$0 == 0x0097
                    0097    706 _CLKSEL	=	0x0097
                    009A    707 G$CCH0MA$0$0 == 0x009a
                    009A    708 _CCH0MA	=	0x009a
                    009C    709 G$P4MDOUT$0$0 == 0x009c
                    009C    710 _P4MDOUT	=	0x009c
                    009D    711 G$P5MDOUT$0$0 == 0x009d
                    009D    712 _P5MDOUT	=	0x009d
                    009E    713 G$P6MDOUT$0$0 == 0x009e
                    009E    714 _P6MDOUT	=	0x009e
                    009F    715 G$P7MDOUT$0$0 == 0x009f
                    009F    716 _P7MDOUT	=	0x009f
                    00A1    717 G$CCH0CN$0$0 == 0x00a1
                    00A1    718 _CCH0CN	=	0x00a1
                    00A2    719 G$CCH0TN$0$0 == 0x00a2
                    00A2    720 _CCH0TN	=	0x00a2
                    00A3    721 G$CCH0LC$0$0 == 0x00a3
                    00A3    722 _CCH0LC	=	0x00a3
                    00A4    723 G$P0MDOUT$0$0 == 0x00a4
                    00A4    724 _P0MDOUT	=	0x00a4
                    00A5    725 G$P1MDOUT$0$0 == 0x00a5
                    00A5    726 _P1MDOUT	=	0x00a5
                    00A6    727 G$P2MDOUT$0$0 == 0x00a6
                    00A6    728 _P2MDOUT	=	0x00a6
                    00A7    729 G$P3MDOUT$0$0 == 0x00a7
                    00A7    730 _P3MDOUT	=	0x00a7
                    00AD    731 G$P1MDIN$0$0 == 0x00ad
                    00AD    732 _P1MDIN	=	0x00ad
                    00B7    733 G$FLACL$0$0 == 0x00b7
                    00B7    734 _FLACL	=	0x00b7
                    00C8    735 G$P4$0$0 == 0x00c8
                    00C8    736 _P4	=	0x00c8
                    00D8    737 G$P5$0$0 == 0x00d8
                    00D8    738 _P5	=	0x00d8
                    00E1    739 G$XBR0$0$0 == 0x00e1
                    00E1    740 _XBR0	=	0x00e1
                    00E2    741 G$XBR1$0$0 == 0x00e2
                    00E2    742 _XBR1	=	0x00e2
                    00E3    743 G$XBR2$0$0 == 0x00e3
                    00E3    744 _XBR2	=	0x00e3
                    00E8    745 G$P6$0$0 == 0x00e8
                    00E8    746 _P6	=	0x00e8
                    00F8    747 G$P7$0$0 == 0x00f8
                    00F8    748 _P7	=	0x00f8
                    8C8A    749 G$TMR0$0$0 == 0x8c8a
                    8C8A    750 _TMR0	=	0x8c8a
                    8D8B    751 G$TMR1$0$0 == 0x8d8b
                    8D8B    752 _TMR1	=	0x8d8b
                    CDCC    753 G$TMR2$0$0 == 0xcdcc
                    CDCC    754 _TMR2	=	0xcdcc
                    CBCA    755 G$RCAP2$0$0 == 0xcbca
                    CBCA    756 _RCAP2	=	0xcbca
                    BFBE    757 G$ADC0$0$0 == 0xbfbe
                    BFBE    758 _ADC0	=	0xbfbe
                    C5C4    759 G$ADC0GT$0$0 == 0xc5c4
                    C5C4    760 _ADC0GT	=	0xc5c4
                    C7C6    761 G$ADC0LT$0$0 == 0xc7c6
                    C7C6    762 _ADC0LT	=	0xc7c6
                    D3D2    763 G$DAC0$0$0 == 0xd3d2
                    D3D2    764 _DAC0	=	0xd3d2
                    FAF9    765 G$PCA0$0$0 == 0xfaf9
                    FAF9    766 _PCA0	=	0xfaf9
                    FCFB    767 G$PCA0CP0$0$0 == 0xfcfb
                    FCFB    768 _PCA0CP0	=	0xfcfb
                    FEFD    769 G$PCA0CP1$0$0 == 0xfefd
                    FEFD    770 _PCA0CP1	=	0xfefd
                    EAE9    771 G$PCA0CP2$0$0 == 0xeae9
                    EAE9    772 _PCA0CP2	=	0xeae9
                    ECEB    773 G$PCA0CP3$0$0 == 0xeceb
                    ECEB    774 _PCA0CP3	=	0xeceb
                    EEED    775 G$PCA0CP4$0$0 == 0xeeed
                    EEED    776 _PCA0CP4	=	0xeeed
                    E2E1    777 G$PCA0CP5$0$0 == 0xe2e1
                    E2E1    778 _PCA0CP5	=	0xe2e1
                    CDCC    779 G$TMR3$0$0 == 0xcdcc
                    CDCC    780 _TMR3	=	0xcdcc
                    CBCA    781 G$RCAP3$0$0 == 0xcbca
                    CBCA    782 _RCAP3	=	0xcbca
                    D3D2    783 G$DAC1$0$0 == 0xd3d2
                    D3D2    784 _DAC1	=	0xd3d2
                    CDCC    785 G$TMR4$0$0 == 0xcdcc
                    CDCC    786 _TMR4	=	0xcdcc
                    CBCA    787 G$RCAP4$0$0 == 0xcbca
                    CBCA    788 _RCAP4	=	0xcbca
                    C2C1    789 G$MAC0A$0$0 == 0xc2c1
                    C2C1    790 _MAC0A	=	0xc2c1
                    96959493    791 G$MAC0ACC$0$0 == 0x96959493
                    96959493    792 _MAC0ACC	=	0x96959493
                    CFCE    793 G$MAC0RND$0$0 == 0xcfce
                    CFCE    794 _MAC0RND	=	0xcfce
                            795 ;--------------------------------------------------------
                            796 ; special function bits
                            797 ;--------------------------------------------------------
                            798 	.area RSEG    (DATA)
                    0080    799 G$P0_0$0$0 == 0x0080
                    0080    800 _P0_0	=	0x0080
                    0081    801 G$P0_1$0$0 == 0x0081
                    0081    802 _P0_1	=	0x0081
                    0082    803 G$P0_2$0$0 == 0x0082
                    0082    804 _P0_2	=	0x0082
                    0083    805 G$P0_3$0$0 == 0x0083
                    0083    806 _P0_3	=	0x0083
                    0084    807 G$P0_4$0$0 == 0x0084
                    0084    808 _P0_4	=	0x0084
                    0085    809 G$P0_5$0$0 == 0x0085
                    0085    810 _P0_5	=	0x0085
                    0086    811 G$P0_6$0$0 == 0x0086
                    0086    812 _P0_6	=	0x0086
                    0087    813 G$P0_7$0$0 == 0x0087
                    0087    814 _P0_7	=	0x0087
                    0088    815 G$IT0$0$0 == 0x0088
                    0088    816 _IT0	=	0x0088
                    0089    817 G$IE0$0$0 == 0x0089
                    0089    818 _IE0	=	0x0089
                    008A    819 G$IT1$0$0 == 0x008a
                    008A    820 _IT1	=	0x008a
                    008B    821 G$IE1$0$0 == 0x008b
                    008B    822 _IE1	=	0x008b
                    008C    823 G$TR0$0$0 == 0x008c
                    008C    824 _TR0	=	0x008c
                    008D    825 G$TF0$0$0 == 0x008d
                    008D    826 _TF0	=	0x008d
                    008E    827 G$TR1$0$0 == 0x008e
                    008E    828 _TR1	=	0x008e
                    008F    829 G$TF1$0$0 == 0x008f
                    008F    830 _TF1	=	0x008f
                    0088    831 G$CP0HYN0$0$0 == 0x0088
                    0088    832 _CP0HYN0	=	0x0088
                    0089    833 G$CP0HYN1$0$0 == 0x0089
                    0089    834 _CP0HYN1	=	0x0089
                    008A    835 G$CP0HYP0$0$0 == 0x008a
                    008A    836 _CP0HYP0	=	0x008a
                    008B    837 G$CP0HYP1$0$0 == 0x008b
                    008B    838 _CP0HYP1	=	0x008b
                    008C    839 G$CP0FIF$0$0 == 0x008c
                    008C    840 _CP0FIF	=	0x008c
                    008D    841 G$CP0RIF$0$0 == 0x008d
                    008D    842 _CP0RIF	=	0x008d
                    008E    843 G$CP0OUT$0$0 == 0x008e
                    008E    844 _CP0OUT	=	0x008e
                    008F    845 G$CP0EN$0$0 == 0x008f
                    008F    846 _CP0EN	=	0x008f
                    0088    847 G$CP1HYN0$0$0 == 0x0088
                    0088    848 _CP1HYN0	=	0x0088
                    0089    849 G$CP1HYN1$0$0 == 0x0089
                    0089    850 _CP1HYN1	=	0x0089
                    008A    851 G$CP1HYP0$0$0 == 0x008a
                    008A    852 _CP1HYP0	=	0x008a
                    008B    853 G$CP1HYP1$0$0 == 0x008b
                    008B    854 _CP1HYP1	=	0x008b
                    008C    855 G$CP1FIF$0$0 == 0x008c
                    008C    856 _CP1FIF	=	0x008c
                    008D    857 G$CP1RIF$0$0 == 0x008d
                    008D    858 _CP1RIF	=	0x008d
                    008E    859 G$CP1OUT$0$0 == 0x008e
                    008E    860 _CP1OUT	=	0x008e
                    008F    861 G$CP1EN$0$0 == 0x008f
                    008F    862 _CP1EN	=	0x008f
                    0088    863 G$FLHBUSY$0$0 == 0x0088
                    0088    864 _FLHBUSY	=	0x0088
                    0090    865 G$P1_0$0$0 == 0x0090
                    0090    866 _P1_0	=	0x0090
                    0091    867 G$P1_1$0$0 == 0x0091
                    0091    868 _P1_1	=	0x0091
                    0092    869 G$P1_2$0$0 == 0x0092
                    0092    870 _P1_2	=	0x0092
                    0093    871 G$P1_3$0$0 == 0x0093
                    0093    872 _P1_3	=	0x0093
                    0094    873 G$P1_4$0$0 == 0x0094
                    0094    874 _P1_4	=	0x0094
                    0095    875 G$P1_5$0$0 == 0x0095
                    0095    876 _P1_5	=	0x0095
                    0096    877 G$P1_6$0$0 == 0x0096
                    0096    878 _P1_6	=	0x0096
                    0097    879 G$P1_7$0$0 == 0x0097
                    0097    880 _P1_7	=	0x0097
                    0098    881 G$RI0$0$0 == 0x0098
                    0098    882 _RI0	=	0x0098
                    0098    883 G$RI$0$0 == 0x0098
                    0098    884 _RI	=	0x0098
                    0099    885 G$TI0$0$0 == 0x0099
                    0099    886 _TI0	=	0x0099
                    0099    887 G$TI$0$0 == 0x0099
                    0099    888 _TI	=	0x0099
                    009A    889 G$RB80$0$0 == 0x009a
                    009A    890 _RB80	=	0x009a
                    009B    891 G$TB80$0$0 == 0x009b
                    009B    892 _TB80	=	0x009b
                    009C    893 G$REN0$0$0 == 0x009c
                    009C    894 _REN0	=	0x009c
                    009C    895 G$REN$0$0 == 0x009c
                    009C    896 _REN	=	0x009c
                    009D    897 G$SM20$0$0 == 0x009d
                    009D    898 _SM20	=	0x009d
                    009E    899 G$SM10$0$0 == 0x009e
                    009E    900 _SM10	=	0x009e
                    009F    901 G$SM00$0$0 == 0x009f
                    009F    902 _SM00	=	0x009f
                    0098    903 G$RI1$0$0 == 0x0098
                    0098    904 _RI1	=	0x0098
                    0099    905 G$TI1$0$0 == 0x0099
                    0099    906 _TI1	=	0x0099
                    009A    907 G$RB81$0$0 == 0x009a
                    009A    908 _RB81	=	0x009a
                    009B    909 G$TB81$0$0 == 0x009b
                    009B    910 _TB81	=	0x009b
                    009C    911 G$REN1$0$0 == 0x009c
                    009C    912 _REN1	=	0x009c
                    009D    913 G$MCE1$0$0 == 0x009d
                    009D    914 _MCE1	=	0x009d
                    009F    915 G$S1MODE$0$0 == 0x009f
                    009F    916 _S1MODE	=	0x009f
                    00A0    917 G$P2_0$0$0 == 0x00a0
                    00A0    918 _P2_0	=	0x00a0
                    00A1    919 G$P2_1$0$0 == 0x00a1
                    00A1    920 _P2_1	=	0x00a1
                    00A2    921 G$P2_2$0$0 == 0x00a2
                    00A2    922 _P2_2	=	0x00a2
                    00A3    923 G$P2_3$0$0 == 0x00a3
                    00A3    924 _P2_3	=	0x00a3
                    00A4    925 G$P2_4$0$0 == 0x00a4
                    00A4    926 _P2_4	=	0x00a4
                    00A5    927 G$P2_5$0$0 == 0x00a5
                    00A5    928 _P2_5	=	0x00a5
                    00A6    929 G$P2_6$0$0 == 0x00a6
                    00A6    930 _P2_6	=	0x00a6
                    00A7    931 G$P2_7$0$0 == 0x00a7
                    00A7    932 _P2_7	=	0x00a7
                    00A8    933 G$EX0$0$0 == 0x00a8
                    00A8    934 _EX0	=	0x00a8
                    00A9    935 G$ET0$0$0 == 0x00a9
                    00A9    936 _ET0	=	0x00a9
                    00AA    937 G$EX1$0$0 == 0x00aa
                    00AA    938 _EX1	=	0x00aa
                    00AB    939 G$ET1$0$0 == 0x00ab
                    00AB    940 _ET1	=	0x00ab
                    00AC    941 G$ES0$0$0 == 0x00ac
                    00AC    942 _ES0	=	0x00ac
                    00AC    943 G$ES$0$0 == 0x00ac
                    00AC    944 _ES	=	0x00ac
                    00AD    945 G$ET2$0$0 == 0x00ad
                    00AD    946 _ET2	=	0x00ad
                    00AF    947 G$EA$0$0 == 0x00af
                    00AF    948 _EA	=	0x00af
                    00B0    949 G$P3_0$0$0 == 0x00b0
                    00B0    950 _P3_0	=	0x00b0
                    00B1    951 G$P3_1$0$0 == 0x00b1
                    00B1    952 _P3_1	=	0x00b1
                    00B2    953 G$P3_2$0$0 == 0x00b2
                    00B2    954 _P3_2	=	0x00b2
                    00B3    955 G$P3_3$0$0 == 0x00b3
                    00B3    956 _P3_3	=	0x00b3
                    00B4    957 G$P3_4$0$0 == 0x00b4
                    00B4    958 _P3_4	=	0x00b4
                    00B5    959 G$P3_5$0$0 == 0x00b5
                    00B5    960 _P3_5	=	0x00b5
                    00B6    961 G$P3_6$0$0 == 0x00b6
                    00B6    962 _P3_6	=	0x00b6
                    00B7    963 G$P3_7$0$0 == 0x00b7
                    00B7    964 _P3_7	=	0x00b7
                    00B8    965 G$PX0$0$0 == 0x00b8
                    00B8    966 _PX0	=	0x00b8
                    00B9    967 G$PT0$0$0 == 0x00b9
                    00B9    968 _PT0	=	0x00b9
                    00BA    969 G$PX1$0$0 == 0x00ba
                    00BA    970 _PX1	=	0x00ba
                    00BB    971 G$PT1$0$0 == 0x00bb
                    00BB    972 _PT1	=	0x00bb
                    00BC    973 G$PS0$0$0 == 0x00bc
                    00BC    974 _PS0	=	0x00bc
                    00BC    975 G$PS$0$0 == 0x00bc
                    00BC    976 _PS	=	0x00bc
                    00BD    977 G$PT2$0$0 == 0x00bd
                    00BD    978 _PT2	=	0x00bd
                    00C0    979 G$SMBTOE$0$0 == 0x00c0
                    00C0    980 _SMBTOE	=	0x00c0
                    00C1    981 G$SMBFTE$0$0 == 0x00c1
                    00C1    982 _SMBFTE	=	0x00c1
                    00C2    983 G$AA$0$0 == 0x00c2
                    00C2    984 _AA	=	0x00c2
                    00C3    985 G$SI$0$0 == 0x00c3
                    00C3    986 _SI	=	0x00c3
                    00C4    987 G$STO$0$0 == 0x00c4
                    00C4    988 _STO	=	0x00c4
                    00C5    989 G$STA$0$0 == 0x00c5
                    00C5    990 _STA	=	0x00c5
                    00C6    991 G$ENSMB$0$0 == 0x00c6
                    00C6    992 _ENSMB	=	0x00c6
                    00C7    993 G$BUSY$0$0 == 0x00c7
                    00C7    994 _BUSY	=	0x00c7
                    00C0    995 G$MAC0N$0$0 == 0x00c0
                    00C0    996 _MAC0N	=	0x00c0
                    00C1    997 G$MAC0SO$0$0 == 0x00c1
                    00C1    998 _MAC0SO	=	0x00c1
                    00C2    999 G$MAC0Z$0$0 == 0x00c2
                    00C2   1000 _MAC0Z	=	0x00c2
                    00C3   1001 G$MAC0HO$0$0 == 0x00c3
                    00C3   1002 _MAC0HO	=	0x00c3
                    00C8   1003 G$CPRL2$0$0 == 0x00c8
                    00C8   1004 _CPRL2	=	0x00c8
                    00C9   1005 G$CT2$0$0 == 0x00c9
                    00C9   1006 _CT2	=	0x00c9
                    00CA   1007 G$TR2$0$0 == 0x00ca
                    00CA   1008 _TR2	=	0x00ca
                    00CB   1009 G$EXEN2$0$0 == 0x00cb
                    00CB   1010 _EXEN2	=	0x00cb
                    00CE   1011 G$EXF2$0$0 == 0x00ce
                    00CE   1012 _EXF2	=	0x00ce
                    00CF   1013 G$TF2$0$0 == 0x00cf
                    00CF   1014 _TF2	=	0x00cf
                    00C8   1015 G$CPRL3$0$0 == 0x00c8
                    00C8   1016 _CPRL3	=	0x00c8
                    00C9   1017 G$CT3$0$0 == 0x00c9
                    00C9   1018 _CT3	=	0x00c9
                    00CA   1019 G$TR3$0$0 == 0x00ca
                    00CA   1020 _TR3	=	0x00ca
                    00CB   1021 G$EXEN3$0$0 == 0x00cb
                    00CB   1022 _EXEN3	=	0x00cb
                    00CE   1023 G$EXF3$0$0 == 0x00ce
                    00CE   1024 _EXF3	=	0x00ce
                    00CF   1025 G$TF3$0$0 == 0x00cf
                    00CF   1026 _TF3	=	0x00cf
                    00C8   1027 G$CPRL4$0$0 == 0x00c8
                    00C8   1028 _CPRL4	=	0x00c8
                    00C9   1029 G$CT4$0$0 == 0x00c9
                    00C9   1030 _CT4	=	0x00c9
                    00CA   1031 G$TR4$0$0 == 0x00ca
                    00CA   1032 _TR4	=	0x00ca
                    00CB   1033 G$EXEN4$0$0 == 0x00cb
                    00CB   1034 _EXEN4	=	0x00cb
                    00CE   1035 G$EXF4$0$0 == 0x00ce
                    00CE   1036 _EXF4	=	0x00ce
                    00CF   1037 G$TF4$0$0 == 0x00cf
                    00CF   1038 _TF4	=	0x00cf
                    00C8   1039 G$P4_0$0$0 == 0x00c8
                    00C8   1040 _P4_0	=	0x00c8
                    00C9   1041 G$P4_1$0$0 == 0x00c9
                    00C9   1042 _P4_1	=	0x00c9
                    00CA   1043 G$P4_2$0$0 == 0x00ca
                    00CA   1044 _P4_2	=	0x00ca
                    00CB   1045 G$P4_3$0$0 == 0x00cb
                    00CB   1046 _P4_3	=	0x00cb
                    00CC   1047 G$P4_4$0$0 == 0x00cc
                    00CC   1048 _P4_4	=	0x00cc
                    00CD   1049 G$P4_5$0$0 == 0x00cd
                    00CD   1050 _P4_5	=	0x00cd
                    00CE   1051 G$P4_6$0$0 == 0x00ce
                    00CE   1052 _P4_6	=	0x00ce
                    00CF   1053 G$P4_7$0$0 == 0x00cf
                    00CF   1054 _P4_7	=	0x00cf
                    00D0   1055 G$P$0$0 == 0x00d0
                    00D0   1056 _P	=	0x00d0
                    00D1   1057 G$F1$0$0 == 0x00d1
                    00D1   1058 _F1	=	0x00d1
                    00D2   1059 G$OV$0$0 == 0x00d2
                    00D2   1060 _OV	=	0x00d2
                    00D3   1061 G$RS0$0$0 == 0x00d3
                    00D3   1062 _RS0	=	0x00d3
                    00D4   1063 G$RS1$0$0 == 0x00d4
                    00D4   1064 _RS1	=	0x00d4
                    00D5   1065 G$F0$0$0 == 0x00d5
                    00D5   1066 _F0	=	0x00d5
                    00D6   1067 G$AC$0$0 == 0x00d6
                    00D6   1068 _AC	=	0x00d6
                    00D7   1069 G$CY$0$0 == 0x00d7
                    00D7   1070 _CY	=	0x00d7
                    00D8   1071 G$CCF0$0$0 == 0x00d8
                    00D8   1072 _CCF0	=	0x00d8
                    00D9   1073 G$CCF1$0$0 == 0x00d9
                    00D9   1074 _CCF1	=	0x00d9
                    00DA   1075 G$CCF2$0$0 == 0x00da
                    00DA   1076 _CCF2	=	0x00da
                    00DB   1077 G$CCF3$0$0 == 0x00db
                    00DB   1078 _CCF3	=	0x00db
                    00DC   1079 G$CCF4$0$0 == 0x00dc
                    00DC   1080 _CCF4	=	0x00dc
                    00DD   1081 G$CCF5$0$0 == 0x00dd
                    00DD   1082 _CCF5	=	0x00dd
                    00DE   1083 G$CR$0$0 == 0x00de
                    00DE   1084 _CR	=	0x00de
                    00DF   1085 G$CF$0$0 == 0x00df
                    00DF   1086 _CF	=	0x00df
                    00D8   1087 G$P5_0$0$0 == 0x00d8
                    00D8   1088 _P5_0	=	0x00d8
                    00D9   1089 G$P5_1$0$0 == 0x00d9
                    00D9   1090 _P5_1	=	0x00d9
                    00DA   1091 G$P5_2$0$0 == 0x00da
                    00DA   1092 _P5_2	=	0x00da
                    00DB   1093 G$P5_3$0$0 == 0x00db
                    00DB   1094 _P5_3	=	0x00db
                    00DC   1095 G$P5_4$0$0 == 0x00dc
                    00DC   1096 _P5_4	=	0x00dc
                    00DD   1097 G$P5_5$0$0 == 0x00dd
                    00DD   1098 _P5_5	=	0x00dd
                    00DE   1099 G$P5_6$0$0 == 0x00de
                    00DE   1100 _P5_6	=	0x00de
                    00DF   1101 G$P5_7$0$0 == 0x00df
                    00DF   1102 _P5_7	=	0x00df
                    00E8   1103 G$AD0LJST$0$0 == 0x00e8
                    00E8   1104 _AD0LJST	=	0x00e8
                    00E9   1105 G$AD0WINT$0$0 == 0x00e9
                    00E9   1106 _AD0WINT	=	0x00e9
                    00EA   1107 G$AD0CM0$0$0 == 0x00ea
                    00EA   1108 _AD0CM0	=	0x00ea
                    00EB   1109 G$AD0CM1$0$0 == 0x00eb
                    00EB   1110 _AD0CM1	=	0x00eb
                    00EC   1111 G$AD0BUSY$0$0 == 0x00ec
                    00EC   1112 _AD0BUSY	=	0x00ec
                    00ED   1113 G$AD0INT$0$0 == 0x00ed
                    00ED   1114 _AD0INT	=	0x00ed
                    00EE   1115 G$AD0TM$0$0 == 0x00ee
                    00EE   1116 _AD0TM	=	0x00ee
                    00EF   1117 G$AD0EN$0$0 == 0x00ef
                    00EF   1118 _AD0EN	=	0x00ef
                    00E8   1119 G$AD2WINT$0$0 == 0x00e8
                    00E8   1120 _AD2WINT	=	0x00e8
                    00E9   1121 G$AD2CM0$0$0 == 0x00e9
                    00E9   1122 _AD2CM0	=	0x00e9
                    00EA   1123 G$AD2CM1$0$0 == 0x00ea
                    00EA   1124 _AD2CM1	=	0x00ea
                    00EB   1125 G$AD2CM2$0$0 == 0x00eb
                    00EB   1126 _AD2CM2	=	0x00eb
                    00EC   1127 G$AD2BUSY$0$0 == 0x00ec
                    00EC   1128 _AD2BUSY	=	0x00ec
                    00ED   1129 G$AD2INT$0$0 == 0x00ed
                    00ED   1130 _AD2INT	=	0x00ed
                    00EE   1131 G$AD2TM$0$0 == 0x00ee
                    00EE   1132 _AD2TM	=	0x00ee
                    00EF   1133 G$AD2EN$0$0 == 0x00ef
                    00EF   1134 _AD2EN	=	0x00ef
                    00E8   1135 G$P6_0$0$0 == 0x00e8
                    00E8   1136 _P6_0	=	0x00e8
                    00E9   1137 G$P6_1$0$0 == 0x00e9
                    00E9   1138 _P6_1	=	0x00e9
                    00EA   1139 G$P6_2$0$0 == 0x00ea
                    00EA   1140 _P6_2	=	0x00ea
                    00EB   1141 G$P6_3$0$0 == 0x00eb
                    00EB   1142 _P6_3	=	0x00eb
                    00EC   1143 G$P6_4$0$0 == 0x00ec
                    00EC   1144 _P6_4	=	0x00ec
                    00ED   1145 G$P6_5$0$0 == 0x00ed
                    00ED   1146 _P6_5	=	0x00ed
                    00EE   1147 G$P6_6$0$0 == 0x00ee
                    00EE   1148 _P6_6	=	0x00ee
                    00EF   1149 G$P6_7$0$0 == 0x00ef
                    00EF   1150 _P6_7	=	0x00ef
                    00F8   1151 G$SPIEN$0$0 == 0x00f8
                    00F8   1152 _SPIEN	=	0x00f8
                    00F9   1153 G$TXBMT$0$0 == 0x00f9
                    00F9   1154 _TXBMT	=	0x00f9
                    00FA   1155 G$NSSMD0$0$0 == 0x00fa
                    00FA   1156 _NSSMD0	=	0x00fa
                    00FB   1157 G$NSSMD1$0$0 == 0x00fb
                    00FB   1158 _NSSMD1	=	0x00fb
                    00FC   1159 G$RXOVRN$0$0 == 0x00fc
                    00FC   1160 _RXOVRN	=	0x00fc
                    00FD   1161 G$MODF$0$0 == 0x00fd
                    00FD   1162 _MODF	=	0x00fd
                    00FE   1163 G$WCOL$0$0 == 0x00fe
                    00FE   1164 _WCOL	=	0x00fe
                    00FF   1165 G$SPIF$0$0 == 0x00ff
                    00FF   1166 _SPIF	=	0x00ff
                    00F8   1167 G$P7_0$0$0 == 0x00f8
                    00F8   1168 _P7_0	=	0x00f8
                    00F9   1169 G$P7_1$0$0 == 0x00f9
                    00F9   1170 _P7_1	=	0x00f9
                    00FA   1171 G$P7_2$0$0 == 0x00fa
                    00FA   1172 _P7_2	=	0x00fa
                    00FB   1173 G$P7_3$0$0 == 0x00fb
                    00FB   1174 _P7_3	=	0x00fb
                    00FC   1175 G$P7_4$0$0 == 0x00fc
                    00FC   1176 _P7_4	=	0x00fc
                    00FD   1177 G$P7_5$0$0 == 0x00fd
                    00FD   1178 _P7_5	=	0x00fd
                    00FE   1179 G$P7_6$0$0 == 0x00fe
                    00FE   1180 _P7_6	=	0x00fe
                    00FF   1181 G$P7_7$0$0 == 0x00ff
                    00FF   1182 _P7_7	=	0x00ff
                           1183 ;--------------------------------------------------------
                           1184 ; overlayable register banks
                           1185 ;--------------------------------------------------------
                           1186 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                    1187 	.ds 8
                           1188 ;--------------------------------------------------------
                           1189 ; internal ram data
                           1190 ;--------------------------------------------------------
                           1191 	.area DSEG    (DATA)
                    0000   1192 LDM9000_transmit$sloc0$1$0==.
   0000                    1193 _DM9000_transmit_sloc0_1_0:
   0000                    1194 	.ds 3
                           1195 ;--------------------------------------------------------
                           1196 ; overlayable items in internal ram 
                           1197 ;--------------------------------------------------------
                           1198 	.area OSEG    (OVR,DATA)
                           1199 ;--------------------------------------------------------
                           1200 ; indirectly addressable internal ram data
                           1201 ;--------------------------------------------------------
                           1202 	.area ISEG    (DATA)
                    0000   1203 Fdm9000$RX_Length$0$0==.
   0000                    1204 _RX_Length:
   0000                    1205 	.ds 2
                    0002   1206 LDM9000_transmit$i$1$1==.
   0002                    1207 _DM9000_transmit_i_1_1:
   0002                    1208 	.ds 2
                           1209 ;--------------------------------------------------------
                           1210 ; absolute internal ram data
                           1211 ;--------------------------------------------------------
                           1212 	.area IABS    (ABS,DATA)
                           1213 	.area IABS    (ABS,DATA)
                           1214 ;--------------------------------------------------------
                           1215 ; bit data
                           1216 ;--------------------------------------------------------
                           1217 	.area BSEG    (BIT)
                           1218 ;--------------------------------------------------------
                           1219 ; paged external ram data
                           1220 ;--------------------------------------------------------
                           1221 	.area PSEG    (PAG,XDATA)
                           1222 ;--------------------------------------------------------
                           1223 ; external ram data
                           1224 ;--------------------------------------------------------
                           1225 	.area XSEG    (XDATA)
                    8000   1226 G$NIC_REG$0$0 == 0x8000
                    8000   1227 _NIC_REG	=	0x8000
                    8100   1228 G$NIC_DAT$0$0 == 0x8100
                    8100   1229 _NIC_DAT	=	0x8100
                    0000   1230 Lwrite_nicreg$val$1$1==.
   0000                    1231 _write_nicreg_PARM_2:
   0000                    1232 	.ds 1
                    0001   1233 Lwrite_nicreg$IOaddr$1$1==.
   0001                    1234 _write_nicreg_IOaddr_1_1:
   0001                    1235 	.ds 1
                    0002   1236 Lwrite_nicdata$val$1$1==.
   0002                    1237 _write_nicdata_val_1_1:
   0002                    1238 	.ds 1
                    0003   1239 Lset_nicreg$IOaddr$1$1==.
   0003                    1240 _set_nicreg_IOaddr_1_1:
   0003                    1241 	.ds 1
                    0004   1242 LPHY_write$val$1$1==.
   0004                    1243 _PHY_write_PARM_2:
   0004                    1244 	.ds 2
                    0006   1245 LPHY_write$IOaddr$1$1==.
   0006                    1246 _PHY_write_IOaddr_1_1:
   0006                    1247 	.ds 1
                    0007   1248 Lread_nicreg$IOaddr$1$1==.
   0007                    1249 _read_nicreg_IOaddr_1_1:
   0007                    1250 	.ds 1
                    0008   1251 L_wait_ms$count$1$1==.
   0008                    1252 __wait_ms_count_1_1:
   0008                    1253 	.ds 2
                           1254 ;--------------------------------------------------------
                           1255 ; absolute external ram data
                           1256 ;--------------------------------------------------------
                           1257 	.area XABS    (ABS,XDATA)
                           1258 ;--------------------------------------------------------
                           1259 ; external initialized ram data
                           1260 ;--------------------------------------------------------
                           1261 	.area XISEG   (XDATA)
                           1262 	.area HOME    (CODE)
                           1263 	.area GSINIT0 (CODE)
                           1264 	.area GSINIT1 (CODE)
                           1265 	.area GSINIT2 (CODE)
                           1266 	.area GSINIT3 (CODE)
                           1267 	.area GSINIT4 (CODE)
                           1268 	.area GSINIT5 (CODE)
                           1269 	.area GSINIT  (CODE)
                           1270 	.area GSFINAL (CODE)
                           1271 	.area CSEG    (CODE)
                           1272 ;--------------------------------------------------------
                           1273 ; global & static initialisations
                           1274 ;--------------------------------------------------------
                           1275 	.area HOME    (CODE)
                           1276 	.area GSINIT  (CODE)
                           1277 	.area GSFINAL (CODE)
                           1278 	.area GSINIT  (CODE)
                           1279 ;--------------------------------------------------------
                           1280 ; Home
                           1281 ;--------------------------------------------------------
                           1282 	.area HOME    (CODE)
                           1283 	.area HOME    (CODE)
                           1284 ;--------------------------------------------------------
                           1285 ; code
                           1286 ;--------------------------------------------------------
                           1287 	.area CSEG    (CODE)
                           1288 ;------------------------------------------------------------
                           1289 ;Allocation info for local variables in function 'write_nicreg'
                           1290 ;------------------------------------------------------------
                           1291 ;val                       Allocated with name '_write_nicreg_PARM_2'
                           1292 ;IOaddr                    Allocated with name '_write_nicreg_IOaddr_1_1'
                           1293 ;------------------------------------------------------------
                    0000   1294 	G$write_nicreg$0$0 ==.
                    0000   1295 	C$dm9000.c$74$0$0 ==.
                           1296 ;	..\driver\dm9000.c:74: void write_nicreg(u8_t IOaddr, u8_t val)
                           1297 ;	-----------------------------------------
                           1298 ;	 function write_nicreg
                           1299 ;	-----------------------------------------
   0000                    1300 _write_nicreg:
                    0002   1301 	ar2 = 0x02
                    0003   1302 	ar3 = 0x03
                    0004   1303 	ar4 = 0x04
                    0005   1304 	ar5 = 0x05
                    0006   1305 	ar6 = 0x06
                    0007   1306 	ar7 = 0x07
                    0000   1307 	ar0 = 0x00
                    0001   1308 	ar1 = 0x01
   0000 E5 82              1309 	mov	a,dpl
   0002 90s00r01           1310 	mov	dptr,#_write_nicreg_IOaddr_1_1
   0005 F0                 1311 	movx	@dptr,a
                    0006   1312 	C$dm9000.c$76$1$1 ==.
                           1313 ;	..\driver\dm9000.c:76: ENTER_CRITICAL_SECTION;
   0006 C2 AF              1314 	clr	_EA
                    0008   1315 	C$dm9000.c$78$1$1 ==.
                           1316 ;	..\driver\dm9000.c:78: NIC_REG = IOaddr;
   0008 90s00r01           1317 	mov	dptr,#_write_nicreg_IOaddr_1_1
   000B E0                 1318 	movx	a,@dptr
   000C 90 80 00           1319 	mov	dptr,#_NIC_REG
   000F F0                 1320 	movx	@dptr,a
                    0010   1321 	C$dm9000.c$79$1$1 ==.
                           1322 ;	..\driver\dm9000.c:79: NIC_DAT = val;
   0010 90s00r00           1323 	mov	dptr,#_write_nicreg_PARM_2
   0013 E0                 1324 	movx	a,@dptr
   0014 90 81 00           1325 	mov	dptr,#_NIC_DAT
   0017 F0                 1326 	movx	@dptr,a
                    0018   1327 	C$dm9000.c$81$1$1 ==.
                           1328 ;	..\driver\dm9000.c:81: EXIT_CRITICAL_SECTION;
   0018 D2 AF              1329 	setb	_EA
                    001A   1330 	C$dm9000.c$82$1$1 ==.
                    001A   1331 	XG$write_nicreg$0$0 ==.
   001A 22                 1332 	ret
                           1333 ;------------------------------------------------------------
                           1334 ;Allocation info for local variables in function 'write_nicdata'
                           1335 ;------------------------------------------------------------
                           1336 ;val                       Allocated with name '_write_nicdata_val_1_1'
                           1337 ;------------------------------------------------------------
                    001B   1338 	G$write_nicdata$0$0 ==.
                    001B   1339 	C$dm9000.c$87$1$1 ==.
                           1340 ;	..\driver\dm9000.c:87: void write_nicdata(u8_t val)
                           1341 ;	-----------------------------------------
                           1342 ;	 function write_nicdata
                           1343 ;	-----------------------------------------
   001B                    1344 _write_nicdata:
   001B E5 82              1345 	mov	a,dpl
   001D 90s00r02           1346 	mov	dptr,#_write_nicdata_val_1_1
   0020 F0                 1347 	movx	@dptr,a
                    0021   1348 	C$dm9000.c$89$1$1 ==.
                           1349 ;	..\driver\dm9000.c:89: NIC_DAT = val;
   0021 90s00r02           1350 	mov	dptr,#_write_nicdata_val_1_1
   0024 E0                 1351 	movx	a,@dptr
   0025 90 81 00           1352 	mov	dptr,#_NIC_DAT
   0028 F0                 1353 	movx	@dptr,a
                    0029   1354 	C$dm9000.c$90$1$1 ==.
                    0029   1355 	XG$write_nicdata$0$0 ==.
   0029 22                 1356 	ret
                           1357 ;------------------------------------------------------------
                           1358 ;Allocation info for local variables in function 'set_nicreg'
                           1359 ;------------------------------------------------------------
                           1360 ;IOaddr                    Allocated with name '_set_nicreg_IOaddr_1_1'
                           1361 ;------------------------------------------------------------
                    002A   1362 	G$set_nicreg$0$0 ==.
                    002A   1363 	C$dm9000.c$95$1$1 ==.
                           1364 ;	..\driver\dm9000.c:95: void set_nicreg(u8_t IOaddr)
                           1365 ;	-----------------------------------------
                           1366 ;	 function set_nicreg
                           1367 ;	-----------------------------------------
   002A                    1368 _set_nicreg:
   002A E5 82              1369 	mov	a,dpl
   002C 90s00r03           1370 	mov	dptr,#_set_nicreg_IOaddr_1_1
   002F F0                 1371 	movx	@dptr,a
                    0030   1372 	C$dm9000.c$97$1$1 ==.
                           1373 ;	..\driver\dm9000.c:97: NIC_REG = IOaddr;
   0030 90s00r03           1374 	mov	dptr,#_set_nicreg_IOaddr_1_1
   0033 E0                 1375 	movx	a,@dptr
   0034 90 80 00           1376 	mov	dptr,#_NIC_REG
   0037 F0                 1377 	movx	@dptr,a
                    0038   1378 	C$dm9000.c$98$1$1 ==.
                    0038   1379 	XG$set_nicreg$0$0 ==.
   0038 22                 1380 	ret
                           1381 ;------------------------------------------------------------
                           1382 ;Allocation info for local variables in function 'PHY_write'
                           1383 ;------------------------------------------------------------
                           1384 ;val                       Allocated with name '_PHY_write_PARM_2'
                           1385 ;IOaddr                    Allocated with name '_PHY_write_IOaddr_1_1'
                           1386 ;------------------------------------------------------------
                    0039   1387 	G$PHY_write$0$0 ==.
                    0039   1388 	C$dm9000.c$104$1$1 ==.
                           1389 ;	..\driver\dm9000.c:104: void PHY_write(u8_t IOaddr, u16_t val)
                           1390 ;	-----------------------------------------
                           1391 ;	 function PHY_write
                           1392 ;	-----------------------------------------
   0039                    1393 _PHY_write:
   0039 E5 82              1394 	mov	a,dpl
   003B 90s00r06           1395 	mov	dptr,#_PHY_write_IOaddr_1_1
   003E F0                 1396 	movx	@dptr,a
                    003F   1397 	C$dm9000.c$106$1$1 ==.
                           1398 ;	..\driver\dm9000.c:106: ENTER_CRITICAL_SECTION;
   003F C2 AF              1399 	clr	_EA
                    0041   1400 	C$dm9000.c$108$1$1 ==.
                           1401 ;	..\driver\dm9000.c:108: write_nicreg(DM9000_EPCR,0x0a);					// Set EEPROM & PHY Control Reg to write
   0041 90s00r00           1402 	mov	dptr,#_write_nicreg_PARM_2
   0044 74 0A              1403 	mov	a,#0x0A
   0046 F0                 1404 	movx	@dptr,a
   0047 75 82 0B           1405 	mov	dpl,#0x0B
   004A 12s00r00           1406 	lcall	_write_nicreg
                    004D   1407 	C$dm9000.c$109$1$1 ==.
                           1408 ;	..\driver\dm9000.c:109: write_nicreg(DM9000_EPAR,((IOaddr & 0x3f) | DM9000_PHY));	// Set PHY Address Reg to PHY Address
   004D 90s00r06           1409 	mov	dptr,#_PHY_write_IOaddr_1_1
   0050 E0                 1410 	movx	a,@dptr
   0051 FA                 1411 	mov	r2,a
   0052 74 3F              1412 	mov	a,#0x3F
   0054 5A                 1413 	anl	a,r2
   0055 90s00r00           1414 	mov	dptr,#_write_nicreg_PARM_2
   0058 F5 F0              1415 	mov	b,a
   005A 74 40              1416 	mov	a,#0x40
   005C 45 F0              1417 	orl	a,b
   005E F0                 1418 	movx	@dptr,a
   005F 75 82 0C           1419 	mov	dpl,#0x0C
   0062 12s00r00           1420 	lcall	_write_nicreg
                    0065   1421 	C$dm9000.c$110$1$1 ==.
                           1422 ;	..\driver\dm9000.c:110: write_nicreg(DM9000_EPDRH,(u8_t)(val >> 8));	// write high_byte of PHY data
   0065 90s00r04           1423 	mov	dptr,#_PHY_write_PARM_2
   0068 E0                 1424 	movx	a,@dptr
   0069 FA                 1425 	mov	r2,a
   006A A3                 1426 	inc	dptr
   006B E0                 1427 	movx	a,@dptr
   006C FB                 1428 	mov	r3,a
   006D 90s00r00           1429 	mov	dptr,#_write_nicreg_PARM_2
   0070 F0                 1430 	movx	@dptr,a
   0071 75 82 0E           1431 	mov	dpl,#0x0E
   0074 C0 02              1432 	push	ar2
   0076 C0 03              1433 	push	ar3
   0078 12s00r00           1434 	lcall	_write_nicreg
   007B D0 03              1435 	pop	ar3
   007D D0 02              1436 	pop	ar2
                    007F   1437 	C$dm9000.c$111$1$1 ==.
                           1438 ;	..\driver\dm9000.c:111: write_nicreg(DM9000_EPDRL,(u8_t)(val));			// write low_byte of PHY data
   007F 90s00r00           1439 	mov	dptr,#_write_nicreg_PARM_2
   0082 EA                 1440 	mov	a,r2
   0083 F0                 1441 	movx	@dptr,a
   0084 75 82 0D           1442 	mov	dpl,#0x0D
   0087 12s00r00           1443 	lcall	_write_nicreg
                    008A   1444 	C$dm9000.c$112$1$1 ==.
                           1445 ;	..\driver\dm9000.c:112: write_nicreg(DM9000_EPCR,0x00);					// Clear EEPCR
   008A 90s00r00           1446 	mov	dptr,#_write_nicreg_PARM_2
   008D E4                 1447 	clr	a
   008E F0                 1448 	movx	@dptr,a
   008F 75 82 0B           1449 	mov	dpl,#0x0B
   0092 12s00r00           1450 	lcall	_write_nicreg
                    0095   1451 	C$dm9000.c$114$1$1 ==.
                           1452 ;	..\driver\dm9000.c:114: EXIT_CRITICAL_SECTION;
   0095 D2 AF              1453 	setb	_EA
                    0097   1454 	C$dm9000.c$115$1$1 ==.
                    0097   1455 	XG$PHY_write$0$0 ==.
   0097 22                 1456 	ret
                           1457 ;------------------------------------------------------------
                           1458 ;Allocation info for local variables in function 'read_nicreg'
                           1459 ;------------------------------------------------------------
                           1460 ;IOaddr                    Allocated with name '_read_nicreg_IOaddr_1_1'
                           1461 ;temp                      Allocated with name '_read_nicreg_temp_1_1'
                           1462 ;------------------------------------------------------------
                    0098   1463 	G$read_nicreg$0$0 ==.
                    0098   1464 	C$dm9000.c$120$1$1 ==.
                           1465 ;	..\driver\dm9000.c:120: u8_t read_nicreg(u8_t IOaddr)
                           1466 ;	-----------------------------------------
                           1467 ;	 function read_nicreg
                           1468 ;	-----------------------------------------
   0098                    1469 _read_nicreg:
   0098 E5 82              1470 	mov	a,dpl
   009A 90s00r07           1471 	mov	dptr,#_read_nicreg_IOaddr_1_1
   009D F0                 1472 	movx	@dptr,a
                    009E   1473 	C$dm9000.c$124$1$1 ==.
                           1474 ;	..\driver\dm9000.c:124: ENTER_CRITICAL_SECTION;
   009E C2 AF              1475 	clr	_EA
                    00A0   1476 	C$dm9000.c$126$1$1 ==.
                           1477 ;	..\driver\dm9000.c:126: NIC_REG = IOaddr;
   00A0 90s00r07           1478 	mov	dptr,#_read_nicreg_IOaddr_1_1
   00A3 E0                 1479 	movx	a,@dptr
   00A4 90 80 00           1480 	mov	dptr,#_NIC_REG
   00A7 F0                 1481 	movx	@dptr,a
                    00A8   1482 	C$dm9000.c$127$1$1 ==.
                           1483 ;	..\driver\dm9000.c:127: temp = NIC_DAT;
   00A8 90 81 00           1484 	mov	dptr,#_NIC_DAT
   00AB E0                 1485 	movx	a,@dptr
   00AC FA                 1486 	mov	r2,a
                    00AD   1487 	C$dm9000.c$129$1$1 ==.
                           1488 ;	..\driver\dm9000.c:129: EXIT_CRITICAL_SECTION;
   00AD D2 AF              1489 	setb	_EA
                    00AF   1490 	C$dm9000.c$131$1$1 ==.
                           1491 ;	..\driver\dm9000.c:131: return temp;
   00AF 8A 82              1492 	mov	dpl,r2
                    00B1   1493 	C$dm9000.c$133$1$1 ==.
                    00B1   1494 	XG$read_nicreg$0$0 ==.
   00B1 22                 1495 	ret
                           1496 ;------------------------------------------------------------
                           1497 ;Allocation info for local variables in function 'read_nicdata'
                           1498 ;------------------------------------------------------------
                           1499 ;------------------------------------------------------------
                    00B2   1500 	G$read_nicdata$0$0 ==.
                    00B2   1501 	C$dm9000.c$138$1$1 ==.
                           1502 ;	..\driver\dm9000.c:138: u8_t read_nicdata(void)
                           1503 ;	-----------------------------------------
                           1504 ;	 function read_nicdata
                           1505 ;	-----------------------------------------
   00B2                    1506 _read_nicdata:
                    00B2   1507 	C$dm9000.c$140$1$1 ==.
                           1508 ;	..\driver\dm9000.c:140: return (NIC_DAT);
   00B2 90 81 00           1509 	mov	dptr,#_NIC_DAT
   00B5 E0                 1510 	movx	a,@dptr
                    00B6   1511 	C$dm9000.c$141$1$1 ==.
                    00B6   1512 	XG$read_nicdata$0$0 ==.
   00B6 F5 82              1513 	mov	dpl,a
   00B8 22                 1514 	ret
                           1515 ;------------------------------------------------------------
                           1516 ;Allocation info for local variables in function '_wait_ms'
                           1517 ;------------------------------------------------------------
                           1518 ;count                     Allocated with name '__wait_ms_count_1_1'
                           1519 ;i                         Allocated to registers r4 r5 
                           1520 ;------------------------------------------------------------
                    00B9   1521 	Fdm9000$_wait_ms$0$0 ==.
                    00B9   1522 	C$dm9000.c$146$1$1 ==.
                           1523 ;	..\driver\dm9000.c:146: static void _wait_ms(u16_t count)
                           1524 ;	-----------------------------------------
                           1525 ;	 function _wait_ms
                           1526 ;	-----------------------------------------
   00B9                    1527 __wait_ms:
   00B9 AA 83              1528 	mov	r2,dph
   00BB E5 82              1529 	mov	a,dpl
   00BD 90s00r08           1530 	mov	dptr,#__wait_ms_count_1_1
   00C0 F0                 1531 	movx	@dptr,a
   00C1 A3                 1532 	inc	dptr
   00C2 EA                 1533 	mov	a,r2
   00C3 F0                 1534 	movx	@dptr,a
   00C4 90s00r08           1535 	mov	dptr,#__wait_ms_count_1_1
   00C7 E0                 1536 	movx	a,@dptr
   00C8 FA                 1537 	mov	r2,a
   00C9 A3                 1538 	inc	dptr
   00CA E0                 1539 	movx	a,@dptr
   00CB FB                 1540 	mov	r3,a
   00CC                    1541 00105$:
                    00CC   1542 	C$dm9000.c$150$1$1 ==.
                           1543 ;	..\driver\dm9000.c:150: for ( ; count > 0; count--) {
   00CC EA                 1544 	mov	a,r2
   00CD 4B                 1545 	orl	a,r3
   00CE 60 04              1546 	jz	00111$
   00D0 7C 01              1547 	mov	r4,#0x01
   00D2 80 02              1548 	sjmp	00112$
   00D4                    1549 00111$:
   00D4 7C 00              1550 	mov	r4,#0x00
   00D6                    1551 00112$:
   00D6 EC                 1552 	mov	a,r4
   00D7 60 27              1553 	jz	00122$
                    00D9   1554 	C$dm9000.c$151$1$1 ==.
                           1555 ;	..\driver\dm9000.c:151: for ( i = 10000; i > 0; i--);
   00D9 7C 10              1556 	mov	r4,#0x10
   00DB 7D 27              1557 	mov	r5,#0x27
   00DD                    1558 00101$:
   00DD EC                 1559 	mov	a,r4
   00DE 4D                 1560 	orl	a,r5
   00DF 60 04              1561 	jz	00113$
   00E1 7E 01              1562 	mov	r6,#0x01
   00E3 80 02              1563 	sjmp	00114$
   00E5                    1564 00113$:
   00E5 7E 00              1565 	mov	r6,#0x00
   00E7                    1566 00114$:
   00E7 EE                 1567 	mov	a,r6
   00E8 60 07              1568 	jz	00107$
   00EA 1C                 1569 	dec	r4
   00EB BC FF EF           1570 	cjne	r4,#0xff,00101$
   00EE 1D                 1571 	dec	r5
   00EF 80 EC              1572 	sjmp	00101$
   00F1                    1573 00107$:
                    00F1   1574 	C$dm9000.c$150$1$1 ==.
                           1575 ;	..\driver\dm9000.c:150: for ( ; count > 0; count--) {
   00F1 1A                 1576 	dec	r2
   00F2 BA FF 01           1577 	cjne	r2,#0xff,00127$
   00F5 1B                 1578 	dec	r3
   00F6                    1579 00127$:
   00F6 90s00r08           1580 	mov	dptr,#__wait_ms_count_1_1
   00F9 EA                 1581 	mov	a,r2
   00FA F0                 1582 	movx	@dptr,a
   00FB A3                 1583 	inc	dptr
   00FC EB                 1584 	mov	a,r3
   00FD F0                 1585 	movx	@dptr,a
   00FE 80 CC              1586 	sjmp	00105$
   0100                    1587 00122$:
   0100 90s00r08           1588 	mov	dptr,#__wait_ms_count_1_1
   0103 EA                 1589 	mov	a,r2
   0104 F0                 1590 	movx	@dptr,a
   0105 A3                 1591 	inc	dptr
   0106 EB                 1592 	mov	a,r3
   0107 F0                 1593 	movx	@dptr,a
                    0108   1594 	C$dm9000.c$153$1$1 ==.
                    0108   1595 	XFdm9000$_wait_ms$0$0 ==.
   0108 22                 1596 	ret
                           1597 ;------------------------------------------------------------
                           1598 ;Allocation info for local variables in function 'InitDM9000'
                           1599 ;------------------------------------------------------------
                           1600 ;------------------------------------------------------------
                    0109   1601 	G$InitDM9000$0$0 ==.
                    0109   1602 	C$dm9000.c$162$1$1 ==.
                           1603 ;	..\driver\dm9000.c:162: u8_t InitDM9000(void)
                           1604 ;	-----------------------------------------
                           1605 ;	 function InitDM9000
                           1606 ;	-----------------------------------------
   0109                    1607 _InitDM9000:
                    0109   1608 	C$dm9000.c$169$1$1 ==.
                           1609 ;	..\driver\dm9000.c:169: write_nicreg(DM9000_GPCR, 0x07);    // Power PHY set the GPR to output
   0109 90s00r00           1610 	mov	dptr,#_write_nicreg_PARM_2
   010C 74 07              1611 	mov	a,#0x07
   010E F0                 1612 	movx	@dptr,a
   010F 75 82 1E           1613 	mov	dpl,#0x1E
   0112 12s00r00           1614 	lcall	_write_nicreg
                    0115   1615 	C$dm9000.c$170$1$1 ==.
                           1616 ;	..\driver\dm9000.c:170: write_nicreg(DM9000_GPR,  0x06);	  // Clear the GPIO lines (Led's off)
   0115 90s00r00           1617 	mov	dptr,#_write_nicreg_PARM_2
   0118 74 06              1618 	mov	a,#0x06
   011A F0                 1619 	movx	@dptr,a
   011B 75 82 1F           1620 	mov	dpl,#0x1F
   011E 12s00r00           1621 	lcall	_write_nicreg
                    0121   1622 	C$dm9000.c$171$1$1 ==.
                           1623 ;	..\driver\dm9000.c:171: _wait_ms(1);
   0121 90 00 01           1624 	mov	dptr,#0x0001
   0124 12s00rB9           1625 	lcall	__wait_ms
                    0127   1626 	C$dm9000.c$178$1$1 ==.
                           1627 ;	..\driver\dm9000.c:178: write_nicreg(DM9000_NCR, 0x03);	// Reset
   0127 90s00r00           1628 	mov	dptr,#_write_nicreg_PARM_2
   012A 74 03              1629 	mov	a,#0x03
   012C F0                 1630 	movx	@dptr,a
   012D 75 82 00           1631 	mov	dpl,#0x00
   0130 12s00r00           1632 	lcall	_write_nicreg
                    0133   1633 	C$dm9000.c$179$1$1 ==.
                           1634 ;	..\driver\dm9000.c:179: _wait_ms(1);
   0133 90 00 01           1635 	mov	dptr,#0x0001
   0136 12s00rB9           1636 	lcall	__wait_ms
                    0139   1637 	C$dm9000.c$180$1$1 ==.
                           1638 ;	..\driver\dm9000.c:180: write_nicreg(DM9000_NCR, 0x00);	// Normal mode
   0139 90s00r00           1639 	mov	dptr,#_write_nicreg_PARM_2
   013C E4                 1640 	clr	a
   013D F0                 1641 	movx	@dptr,a
   013E 75 82 00           1642 	mov	dpl,#0x00
   0141 12s00r00           1643 	lcall	_write_nicreg
                    0144   1644 	C$dm9000.c$181$1$1 ==.
                           1645 ;	..\driver\dm9000.c:181: _wait_ms(1);
   0144 90 00 01           1646 	mov	dptr,#0x0001
   0147 12s00rB9           1647 	lcall	__wait_ms
                    014A   1648 	C$dm9000.c$183$1$1 ==.
                           1649 ;	..\driver\dm9000.c:183: write_nicreg(DM9000_NCR, 0x03);
   014A 90s00r00           1650 	mov	dptr,#_write_nicreg_PARM_2
   014D 74 03              1651 	mov	a,#0x03
   014F F0                 1652 	movx	@dptr,a
   0150 75 82 00           1653 	mov	dpl,#0x00
   0153 12s00r00           1654 	lcall	_write_nicreg
                    0156   1655 	C$dm9000.c$184$1$1 ==.
                           1656 ;	..\driver\dm9000.c:184: _wait_ms(1);
   0156 90 00 01           1657 	mov	dptr,#0x0001
   0159 12s00rB9           1658 	lcall	__wait_ms
                    015C   1659 	C$dm9000.c$185$1$1 ==.
                           1660 ;	..\driver\dm9000.c:185: write_nicreg(DM9000_NCR, 0x00);
   015C 90s00r00           1661 	mov	dptr,#_write_nicreg_PARM_2
   015F E4                 1662 	clr	a
   0160 F0                 1663 	movx	@dptr,a
   0161 75 82 00           1664 	mov	dpl,#0x00
   0164 12s00r00           1665 	lcall	_write_nicreg
                    0167   1666 	C$dm9000.c$186$1$1 ==.
                           1667 ;	..\driver\dm9000.c:186: _wait_ms(1);
   0167 90 00 01           1668 	mov	dptr,#0x0001
   016A 12s00rB9           1669 	lcall	__wait_ms
                    016D   1670 	C$dm9000.c$191$1$1 ==.
                           1671 ;	..\driver\dm9000.c:191: read_nicreg(DM9000_NSR);
   016D 75 82 01           1672 	mov	dpl,#0x01
   0170 12s00r98           1673 	lcall	_read_nicreg
                    0173   1674 	C$dm9000.c$197$1$1 ==.
                           1675 ;	..\driver\dm9000.c:197: write_nicreg(DM9000_MAC_REG,  uip_ethaddr.addr[0]);
   0173 90s00r00           1676 	mov	dptr,#_write_nicreg_PARM_2
   0176 78r00              1677 	mov	r0,#_uip_ethaddr
   0178 E6                 1678 	mov	a,@r0
   0179 F0                 1679 	movx	@dptr,a
   017A 75 82 10           1680 	mov	dpl,#0x10
   017D 12s00r00           1681 	lcall	_write_nicreg
                    0180   1682 	C$dm9000.c$198$1$1 ==.
                           1683 ;	..\driver\dm9000.c:198: write_nicreg(DM9000_MAC_REG+1,uip_ethaddr.addr[1]);
   0180 90s00r00           1684 	mov	dptr,#_write_nicreg_PARM_2
   0183 78r01              1685 	mov	r0,#(_uip_ethaddr + 0x0001)
   0185 E6                 1686 	mov	a,@r0
   0186 F0                 1687 	movx	@dptr,a
   0187 75 82 11           1688 	mov	dpl,#0x11
   018A 12s00r00           1689 	lcall	_write_nicreg
                    018D   1690 	C$dm9000.c$199$1$1 ==.
                           1691 ;	..\driver\dm9000.c:199: write_nicreg(DM9000_MAC_REG+2,uip_ethaddr.addr[2]);
   018D 90s00r00           1692 	mov	dptr,#_write_nicreg_PARM_2
   0190 78r02              1693 	mov	r0,#(_uip_ethaddr + 0x0002)
   0192 E6                 1694 	mov	a,@r0
   0193 F0                 1695 	movx	@dptr,a
   0194 75 82 12           1696 	mov	dpl,#0x12
   0197 12s00r00           1697 	lcall	_write_nicreg
                    019A   1698 	C$dm9000.c$200$1$1 ==.
                           1699 ;	..\driver\dm9000.c:200: write_nicreg(DM9000_MAC_REG+3,uip_ethaddr.addr[3]);
   019A 90s00r00           1700 	mov	dptr,#_write_nicreg_PARM_2
   019D 78r03              1701 	mov	r0,#(_uip_ethaddr + 0x0003)
   019F E6                 1702 	mov	a,@r0
   01A0 F0                 1703 	movx	@dptr,a
   01A1 75 82 13           1704 	mov	dpl,#0x13
   01A4 12s00r00           1705 	lcall	_write_nicreg
                    01A7   1706 	C$dm9000.c$201$1$1 ==.
                           1707 ;	..\driver\dm9000.c:201: write_nicreg(DM9000_MAC_REG+4,uip_ethaddr.addr[4]);
   01A7 90s00r00           1708 	mov	dptr,#_write_nicreg_PARM_2
   01AA 78r04              1709 	mov	r0,#(_uip_ethaddr + 0x0004)
   01AC E6                 1710 	mov	a,@r0
   01AD F0                 1711 	movx	@dptr,a
   01AE 75 82 14           1712 	mov	dpl,#0x14
   01B1 12s00r00           1713 	lcall	_write_nicreg
                    01B4   1714 	C$dm9000.c$202$1$1 ==.
                           1715 ;	..\driver\dm9000.c:202: write_nicreg(DM9000_MAC_REG+5,uip_ethaddr.addr[5]);
   01B4 90s00r00           1716 	mov	dptr,#_write_nicreg_PARM_2
   01B7 78r05              1717 	mov	r0,#(_uip_ethaddr + 0x0005)
   01B9 E6                 1718 	mov	a,@r0
   01BA F0                 1719 	movx	@dptr,a
   01BB 75 82 15           1720 	mov	dpl,#0x15
   01BE 12s00r00           1721 	lcall	_write_nicreg
                    01C1   1722 	C$dm9000.c$205$1$1 ==.
                           1723 ;	..\driver\dm9000.c:205: write_nicreg(DM9000_MLC_REG,  0xff);
   01C1 90s00r00           1724 	mov	dptr,#_write_nicreg_PARM_2
   01C4 74 FF              1725 	mov	a,#0xFF
   01C6 F0                 1726 	movx	@dptr,a
   01C7 75 82 16           1727 	mov	dpl,#0x16
   01CA 12s00r00           1728 	lcall	_write_nicreg
                    01CD   1729 	C$dm9000.c$206$1$1 ==.
                           1730 ;	..\driver\dm9000.c:206: write_nicreg(DM9000_MLC_REG+1,0xff);
   01CD 90s00r00           1731 	mov	dptr,#_write_nicreg_PARM_2
   01D0 74 FF              1732 	mov	a,#0xFF
   01D2 F0                 1733 	movx	@dptr,a
   01D3 75 82 17           1734 	mov	dpl,#0x17
   01D6 12s00r00           1735 	lcall	_write_nicreg
                    01D9   1736 	C$dm9000.c$207$1$1 ==.
                           1737 ;	..\driver\dm9000.c:207: write_nicreg(DM9000_MLC_REG+2,0xff);
   01D9 90s00r00           1738 	mov	dptr,#_write_nicreg_PARM_2
   01DC 74 FF              1739 	mov	a,#0xFF
   01DE F0                 1740 	movx	@dptr,a
   01DF 75 82 18           1741 	mov	dpl,#0x18
   01E2 12s00r00           1742 	lcall	_write_nicreg
                    01E5   1743 	C$dm9000.c$208$1$1 ==.
                           1744 ;	..\driver\dm9000.c:208: write_nicreg(DM9000_MLC_REG+3,0xff);
   01E5 90s00r00           1745 	mov	dptr,#_write_nicreg_PARM_2
   01E8 74 FF              1746 	mov	a,#0xFF
   01EA F0                 1747 	movx	@dptr,a
   01EB 75 82 19           1748 	mov	dpl,#0x19
   01EE 12s00r00           1749 	lcall	_write_nicreg
                    01F1   1750 	C$dm9000.c$209$1$1 ==.
                           1751 ;	..\driver\dm9000.c:209: write_nicreg(DM9000_MLC_REG+4,0xff);
   01F1 90s00r00           1752 	mov	dptr,#_write_nicreg_PARM_2
   01F4 74 FF              1753 	mov	a,#0xFF
   01F6 F0                 1754 	movx	@dptr,a
   01F7 75 82 1A           1755 	mov	dpl,#0x1A
   01FA 12s00r00           1756 	lcall	_write_nicreg
                    01FD   1757 	C$dm9000.c$210$1$1 ==.
                           1758 ;	..\driver\dm9000.c:210: write_nicreg(DM9000_MLC_REG+5,0xff);
   01FD 90s00r00           1759 	mov	dptr,#_write_nicreg_PARM_2
   0200 74 FF              1760 	mov	a,#0xFF
   0202 F0                 1761 	movx	@dptr,a
   0203 75 82 1B           1762 	mov	dpl,#0x1B
   0206 12s00r00           1763 	lcall	_write_nicreg
                    0209   1764 	C$dm9000.c$211$1$1 ==.
                           1765 ;	..\driver\dm9000.c:211: write_nicreg(DM9000_MLC_REG+6,0xff);
   0209 90s00r00           1766 	mov	dptr,#_write_nicreg_PARM_2
   020C 74 FF              1767 	mov	a,#0xFF
   020E F0                 1768 	movx	@dptr,a
   020F 75 82 1C           1769 	mov	dpl,#0x1C
   0212 12s00r00           1770 	lcall	_write_nicreg
                    0215   1771 	C$dm9000.c$212$1$1 ==.
                           1772 ;	..\driver\dm9000.c:212: write_nicreg(DM9000_MLC_REG+7,0xff);
   0215 90s00r00           1773 	mov	dptr,#_write_nicreg_PARM_2
   0218 74 FF              1774 	mov	a,#0xFF
   021A F0                 1775 	movx	@dptr,a
   021B 75 82 1D           1776 	mov	dpl,#0x1D
   021E 12s00r00           1777 	lcall	_write_nicreg
                    0221   1778 	C$dm9000.c$223$1$1 ==.
                           1779 ;	..\driver\dm9000.c:223: write_nicreg(DM9000_IMR, 0x81);
   0221 90s00r00           1780 	mov	dptr,#_write_nicreg_PARM_2
   0224 74 81              1781 	mov	a,#0x81
   0226 F0                 1782 	movx	@dptr,a
   0227 75 82 FF           1783 	mov	dpl,#0xFF
   022A 12s00r00           1784 	lcall	_write_nicreg
                    022D   1785 	C$dm9000.c$238$1$1 ==.
                           1786 ;	..\driver\dm9000.c:238: write_nicreg(DM9000_RXCR, 0x31);	// Only MAC-packets and RX enable - no multicast packets
   022D 90s00r00           1787 	mov	dptr,#_write_nicreg_PARM_2
   0230 74 31              1788 	mov	a,#0x31
   0232 F0                 1789 	movx	@dptr,a
   0233 75 82 05           1790 	mov	dpl,#0x05
   0236 12s00r00           1791 	lcall	_write_nicreg
                    0239   1792 	C$dm9000.c$243$1$1 ==.
                           1793 ;	..\driver\dm9000.c:243: if ((read_nicreg(DM9000_VID) + (read_nicreg(DM9000_VID+1) << 8)) != DM9000_VendID)
   0239 75 82 28           1794 	mov	dpl,#0x28
   023C 12s00r98           1795 	lcall	_read_nicreg
   023F AA 82              1796 	mov	r2,dpl
   0241 7B 00              1797 	mov	r3,#0x00
   0243 75 82 29           1798 	mov	dpl,#0x29
   0246 C0 02              1799 	push	ar2
   0248 C0 03              1800 	push	ar3
   024A 12s00r98           1801 	lcall	_read_nicreg
   024D AC 82              1802 	mov	r4,dpl
   024F D0 03              1803 	pop	ar3
   0251 D0 02              1804 	pop	ar2
   0253 8C 05              1805 	mov	ar5,r4
   0255 7C 00              1806 	mov	r4,#0x00
   0257 EC                 1807 	mov	a,r4
   0258 2A                 1808 	add	a,r2
   0259 FA                 1809 	mov	r2,a
   025A ED                 1810 	mov	a,r5
   025B 3B                 1811 	addc	a,r3
   025C FB                 1812 	mov	r3,a
   025D BA 46 05           1813 	cjne	r2,#0x46,00109$
   0260 BB 0A 02           1814 	cjne	r3,#0x0A,00109$
   0263 80 04              1815 	sjmp	00102$
   0265                    1816 00109$:
                    0265   1817 	C$dm9000.c$244$1$1 ==.
                           1818 ;	..\driver\dm9000.c:244: return TRUE;		// No chip found
   0265 75 82 01           1819 	mov	dpl,#0x01
   0268 22                 1820 	ret
   0269                    1821 00102$:
                    0269   1822 	C$dm9000.c$246$1$1 ==.
                           1823 ;	..\driver\dm9000.c:246: if ((read_nicreg(DM9000_PID) + (read_nicreg(DM9000_PID+1) << 8)) != DM9000_ProdID)
   0269 75 82 2A           1824 	mov	dpl,#0x2A
   026C 12s00r98           1825 	lcall	_read_nicreg
   026F AA 82              1826 	mov	r2,dpl
   0271 7B 00              1827 	mov	r3,#0x00
   0273 75 82 2B           1828 	mov	dpl,#0x2B
   0276 C0 02              1829 	push	ar2
   0278 C0 03              1830 	push	ar3
   027A 12s00r98           1831 	lcall	_read_nicreg
   027D AC 82              1832 	mov	r4,dpl
   027F D0 03              1833 	pop	ar3
   0281 D0 02              1834 	pop	ar2
   0283 8C 05              1835 	mov	ar5,r4
   0285 7C 00              1836 	mov	r4,#0x00
   0287 EC                 1837 	mov	a,r4
   0288 2A                 1838 	add	a,r2
   0289 FA                 1839 	mov	r2,a
   028A ED                 1840 	mov	a,r5
   028B 3B                 1841 	addc	a,r3
   028C FB                 1842 	mov	r3,a
   028D BA 00 05           1843 	cjne	r2,#0x00,00110$
   0290 BB 90 02           1844 	cjne	r3,#0x90,00110$
   0293 80 04              1845 	sjmp	00104$
   0295                    1846 00110$:
                    0295   1847 	C$dm9000.c$247$1$1 ==.
                           1848 ;	..\driver\dm9000.c:247: return TRUE;		// No chip found
   0295 75 82 01           1849 	mov	dpl,#0x01
   0298 22                 1850 	ret
   0299                    1851 00104$:
                    0299   1852 	C$dm9000.c$249$1$1 ==.
                           1853 ;	..\driver\dm9000.c:249: RX_Length = 0;
   0299 78r00              1854 	mov	r0,#_RX_Length
   029B E4                 1855 	clr	a
   029C F6                 1856 	mov	@r0,a
   029D 08                 1857 	inc	r0
   029E F6                 1858 	mov	@r0,a
                    029F   1859 	C$dm9000.c$251$1$1 ==.
                           1860 ;	..\driver\dm9000.c:251: return FALSE;
   029F 75 82 00           1861 	mov	dpl,#0x00
                    02A2   1862 	C$dm9000.c$252$1$1 ==.
                    02A2   1863 	XG$InitDM9000$0$0 ==.
   02A2 22                 1864 	ret
                           1865 ;------------------------------------------------------------
                           1866 ;Allocation info for local variables in function 'DM9000_receive'
                           1867 ;------------------------------------------------------------
                           1868 ;RX_ready                  Allocated to registers r3 
                           1869 ;RX_status                 Allocated to registers 
                           1870 ;i                         Allocated to registers r2 r4 
                           1871 ;------------------------------------------------------------
                    02A3   1872 	G$DM9000_receive$0$0 ==.
                    02A3   1873 	C$dm9000.c$265$1$1 ==.
                           1874 ;	..\driver\dm9000.c:265: u16_t DM9000_receive(void)
                           1875 ;	-----------------------------------------
                           1876 ;	 function DM9000_receive
                           1877 ;	-----------------------------------------
   02A3                    1878 _DM9000_receive:
                    02A3   1879 	C$dm9000.c$274$1$1 ==.
                           1880 ;	..\driver\dm9000.c:274: read_nicreg(DM9000_MRCMDX); // Read the packet ready flag
   02A3 75 82 F0           1881 	mov	dpl,#0xF0
   02A6 12s00r98           1882 	lcall	_read_nicreg
                    02A9   1883 	C$dm9000.c$276$1$1 ==.
                           1884 ;	..\driver\dm9000.c:276: if ((RX_ready = read_nicdata()) & DM9000_PKT_RDY) // ready check: this byte must be 0 or 1
   02A9 12s00rB2           1885 	lcall	_read_nicdata
   02AC E5 82              1886 	mov	a,dpl
   02AE FA                 1887 	mov	r2,a
   02AF FB                 1888 	mov	r3,a
   02B0 20 E0 03           1889 	jb	acc.0,00117$
   02B3 02s03r37           1890 	ljmp	00104$
   02B6                    1891 00117$:
                    02B6   1892 	C$dm9000.c$281$2$2 ==.
                           1893 ;	..\driver\dm9000.c:281: set_nicreg(DM9000_MRCMD);
   02B6 75 82 F2           1894 	mov	dpl,#0xF2
   02B9 12s00r2A           1895 	lcall	_set_nicreg
                    02BC   1896 	C$dm9000.c$285$2$2 ==.
                           1897 ;	..\driver\dm9000.c:285: RX_status = (read_nicdata() + (read_nicdata() << 8));
   02BC 12s00rB2           1898 	lcall	_read_nicdata
   02BF 12s00rB2           1899 	lcall	_read_nicdata
                    02C2   1900 	C$dm9000.c$288$2$2 ==.
                           1901 ;	..\driver\dm9000.c:288: RX_Length = (read_nicdata() + (read_nicdata() << 8));
   02C2 12s00rB2           1902 	lcall	_read_nicdata
   02C5 AA 82              1903 	mov	r2,dpl
   02C7 7C 00              1904 	mov	r4,#0x00
   02C9 C0 02              1905 	push	ar2
   02CB C0 04              1906 	push	ar4
   02CD 12s00rB2           1907 	lcall	_read_nicdata
   02D0 AD 82              1908 	mov	r5,dpl
   02D2 D0 04              1909 	pop	ar4
   02D4 D0 02              1910 	pop	ar2
   02D6 8D 06              1911 	mov	ar6,r5
   02D8 7D 00              1912 	mov	r5,#0x00
   02DA ED                 1913 	mov	a,r5
   02DB 2A                 1914 	add	a,r2
   02DC FA                 1915 	mov	r2,a
   02DD EE                 1916 	mov	a,r6
   02DE 3C                 1917 	addc	a,r4
   02DF FC                 1918 	mov	r4,a
   02E0 78r00              1919 	mov	r0,#_RX_Length
   02E2 A6 02              1920 	mov	@r0,ar2
   02E4 08                 1921 	inc	r0
   02E5 A6 04              1922 	mov	@r0,ar4
                    02E7   1923 	C$dm9000.c$291$1$1 ==.
                           1924 ;	..\driver\dm9000.c:291: for (i = 0; i < RX_Length; i++)
   02E7 7A 00              1925 	mov	r2,#0x00
   02E9 7C 00              1926 	mov	r4,#0x00
   02EB                    1927 00106$:
   02EB 8A 05              1928 	mov	ar5,r2
   02ED 8C 06              1929 	mov	ar6,r4
   02EF 78r00              1930 	mov	r0,#_RX_Length
   02F1 C3                 1931 	clr	c
   02F2 ED                 1932 	mov	a,r5
   02F3 96                 1933 	subb	a,@r0
   02F4 EE                 1934 	mov	a,r6
   02F5 08                 1935 	inc	r0
   02F6 96                 1936 	subb	a,@r0
   02F7 50 2A              1937 	jnc	00109$
                    02F9   1938 	C$dm9000.c$293$3$3 ==.
                           1939 ;	..\driver\dm9000.c:293: *(uip_buf + i) = read_nicdata();
   02F9 EA                 1940 	mov	a,r2
   02FA 24r00              1941 	add	a,#_uip_buf
   02FC FD                 1942 	mov	r5,a
   02FD EC                 1943 	mov	a,r4
   02FE 34s00              1944 	addc	a,#(_uip_buf >> 8)
   0300 FE                 1945 	mov	r6,a
   0301 C0 02              1946 	push	ar2
   0303 C0 04              1947 	push	ar4
   0305 C0 05              1948 	push	ar5
   0307 C0 06              1949 	push	ar6
   0309 12s00rB2           1950 	lcall	_read_nicdata
   030C AF 82              1951 	mov	r7,dpl
   030E D0 06              1952 	pop	ar6
   0310 D0 05              1953 	pop	ar5
   0312 D0 04              1954 	pop	ar4
   0314 D0 02              1955 	pop	ar2
   0316 8D 82              1956 	mov	dpl,r5
   0318 8E 83              1957 	mov	dph,r6
   031A EF                 1958 	mov	a,r7
   031B F0                 1959 	movx	@dptr,a
                    031C   1960 	C$dm9000.c$291$2$2 ==.
                           1961 ;	..\driver\dm9000.c:291: for (i = 0; i < RX_Length; i++)
   031C 0A                 1962 	inc	r2
   031D BA 00 CB           1963 	cjne	r2,#0x00,00106$
   0320 0C                 1964 	inc	r4
   0321 80 C8              1965 	sjmp	00106$
   0323                    1966 00109$:
                    0323   1967 	C$dm9000.c$295$2$2 ==.
                           1968 ;	..\driver\dm9000.c:295: write_nicreg(DM9000_ISR, DM9000_RX_INTR);// clear bit[0]=PRS latched in ISR
   0323 90s00r00           1969 	mov	dptr,#_write_nicreg_PARM_2
   0326 74 01              1970 	mov	a,#0x01
   0328 F0                 1971 	movx	@dptr,a
   0329 75 82 FE           1972 	mov	dpl,#0xFE
   032C 12s00r00           1973 	lcall	_write_nicreg
                    032F   1974 	C$dm9000.c$296$2$2 ==.
                           1975 ;	..\driver\dm9000.c:296: return RX_Length;// Frame received - return number of bytes in frame
   032F 78r00              1976 	mov	r0,#_RX_Length
   0331 86 82              1977 	mov	dpl,@r0
   0333 08                 1978 	inc	r0
   0334 86 83              1979 	mov	dph,@r0
   0336 22                 1980 	ret
   0337                    1981 00104$:
                    0337   1982 	C$dm9000.c$299$1$1 ==.
                           1983 ;	..\driver\dm9000.c:299: else if (RX_ready != 0x00)
   0337 EB                 1984 	mov	a,r3
   0338 60 2A              1985 	jz	00105$
                    033A   1986 	C$dm9000.c$301$2$4 ==.
                           1987 ;	..\driver\dm9000.c:301: write_nicreg(DM9000_IMR, 0x80);   // Stop Interrupt Request
   033A 90s00r00           1988 	mov	dptr,#_write_nicreg_PARM_2
   033D 74 80              1989 	mov	a,#0x80
   033F F0                 1990 	movx	@dptr,a
   0340 75 82 FF           1991 	mov	dpl,#0xFF
   0343 12s00r00           1992 	lcall	_write_nicreg
                    0346   1993 	C$dm9000.c$302$2$4 ==.
                           1994 ;	..\driver\dm9000.c:302: write_nicreg(DM9000_ISR, 0x0F);   // Clear Interrupt Status
   0346 90s00r00           1995 	mov	dptr,#_write_nicreg_PARM_2
   0349 74 0F              1996 	mov	a,#0x0F
   034B F0                 1997 	movx	@dptr,a
   034C 75 82 FE           1998 	mov	dpl,#0xFE
   034F 12s00r00           1999 	lcall	_write_nicreg
                    0352   2000 	C$dm9000.c$303$2$4 ==.
                           2001 ;	..\driver\dm9000.c:303: write_nicreg(DM9000_RXCR, 0x00);  // Stop Receive function
   0352 90s00r00           2002 	mov	dptr,#_write_nicreg_PARM_2
   0355 E4                 2003 	clr	a
   0356 F0                 2004 	movx	@dptr,a
   0357 75 82 05           2005 	mov	dpl,#0x05
   035A 12s00r00           2006 	lcall	_write_nicreg
                    035D   2007 	C$dm9000.c$305$2$4 ==.
                           2008 ;	..\driver\dm9000.c:305: InitDM9000();			                // Error occured! Reset PHY
   035D 12s01r09           2009 	lcall	_InitDM9000
                    0360   2010 	C$dm9000.c$306$2$4 ==.
                           2011 ;	..\driver\dm9000.c:306: return 0;                         // error
   0360 90 00 00           2012 	mov	dptr,#0x0000
   0363 22                 2013 	ret
   0364                    2014 00105$:
                    0364   2015 	C$dm9000.c$308$1$1 ==.
                           2016 ;	..\driver\dm9000.c:308: write_nicreg(DM9000_ISR, DM9000_RX_INTR);// clear bit[0]=PRS latched in ISR
   0364 90s00r00           2017 	mov	dptr,#_write_nicreg_PARM_2
   0367 74 01              2018 	mov	a,#0x01
   0369 F0                 2019 	movx	@dptr,a
   036A 75 82 FE           2020 	mov	dpl,#0xFE
   036D 12s00r00           2021 	lcall	_write_nicreg
                    0370   2022 	C$dm9000.c$310$1$1 ==.
                           2023 ;	..\driver\dm9000.c:310: return 0;		// No Frame received
   0370 90 00 00           2024 	mov	dptr,#0x0000
                    0373   2025 	C$dm9000.c$311$1$1 ==.
                    0373   2026 	XG$DM9000_receive$0$0 ==.
   0373 22                 2027 	ret
                           2028 ;------------------------------------------------------------
                           2029 ;Allocation info for local variables in function 'tcpip_output'
                           2030 ;------------------------------------------------------------
                           2031 ;------------------------------------------------------------
                    0374   2032 	G$tcpip_output$0$0 ==.
                    0374   2033 	C$dm9000.c$328$1$1 ==.
                           2034 ;	..\driver\dm9000.c:328: void tcpip_output(void)
                           2035 ;	-----------------------------------------
                           2036 ;	 function tcpip_output
                           2037 ;	-----------------------------------------
   0374                    2038 _tcpip_output:
                    0374   2039 	C$dm9000.c$330$1$1 ==.
                           2040 ;	..\driver\dm9000.c:330: DM9000_transmit();
                    0374   2041 	C$dm9000.c$331$1$1 ==.
                    0374   2042 	XG$tcpip_output$0$0 ==.
   0374 02s03r77           2043 	ljmp	_DM9000_transmit
                           2044 ;------------------------------------------------------------
                           2045 ;Allocation info for local variables in function 'DM9000_transmit'
                           2046 ;------------------------------------------------------------
                           2047 ;sloc0                     Allocated with name '_DM9000_transmit_sloc0_1_0'
                           2048 ;ptr                       Allocated with name '_DM9000_transmit_ptr_1_1'
                           2049 ;i                         Allocated with name '_DM9000_transmit_i_1_1'
                           2050 ;j                         Allocated to registers r3 r7 
                           2051 ;------------------------------------------------------------
                    0377   2052 	G$DM9000_transmit$0$0 ==.
                    0377   2053 	C$dm9000.c$332$1$1 ==.
                           2054 ;	..\driver\dm9000.c:332: void DM9000_transmit(void)
                           2055 ;	-----------------------------------------
                           2056 ;	 function DM9000_transmit
                           2057 ;	-----------------------------------------
   0377                    2058 _DM9000_transmit:
                    0377   2059 	C$dm9000.c$339$1$1 ==.
                           2060 ;	..\driver\dm9000.c:339: while (read_nicreg(DM9000_TCR) & 0x01);
   0377                    2061 00101$:
   0377 75 82 02           2062 	mov	dpl,#0x02
   037A 12s00r98           2063 	lcall	_read_nicreg
   037D E5 82              2064 	mov	a,dpl
   037F 20 E0 F5           2065 	jb	acc.0,00101$
                    0382   2066 	C$dm9000.c$343$1$1 ==.
                           2067 ;	..\driver\dm9000.c:343: write_nicreg(DM9000_ISR, DM9000_TX_INTR);
   0382 90s00r00           2068 	mov	dptr,#_write_nicreg_PARM_2
   0385 74 02              2069 	mov	a,#0x02
   0387 F0                 2070 	movx	@dptr,a
   0388 75 82 FE           2071 	mov	dpl,#0xFE
   038B 12s00r00           2072 	lcall	_write_nicreg
                    038E   2073 	C$dm9000.c$346$1$1 ==.
                           2074 ;	..\driver\dm9000.c:346: set_nicreg(DM9000_MWCMD);
   038E 75 82 F8           2075 	mov	dpl,#0xF8
   0391 12s00r2A           2076 	lcall	_set_nicreg
                    0394   2077 	C$dm9000.c$350$1$1 ==.
                           2078 ;	..\driver\dm9000.c:350: ptr = &uip_buf[0];
                    0394   2079 	C$dm9000.c$356$1$1 ==.
                           2080 ;	..\driver\dm9000.c:356: if (uip_buf[UIP_LLH_LEN + 9] == UIP_PROTO_TCP)
   0394 90s00r17           2081 	mov	dptr,#(_uip_buf + 0x0017)
   0397 E0                 2082 	movx	a,@dptr
   0398 FA                 2083 	mov	r2,a
   0399 BA 06 23           2084 	cjne	r2,#0x06,00111$
                    039C   2085 	C$dm9000.c$357$1$1 ==.
                           2086 ;	..\driver\dm9000.c:357: j = (UIP_LLH_LEN + UIP_TCPIP_HLEN + (((uip_buf[UIP_LLH_LEN + 32] >> 4) - 5) << 2));
   039C 90s00r2E           2087 	mov	dptr,#(_uip_buf + 0x002e)
   039F E0                 2088 	movx	a,@dptr
   03A0 C4                 2089 	swap	a
   03A1 54 0F              2090 	anl	a,#0x0f
   03A3 7C 00              2091 	mov	r4,#0x00
   03A5 24 FB              2092 	add	a,#0xfb
   03A7 FB                 2093 	mov	r3,a
   03A8 EC                 2094 	mov	a,r4
   03A9 34 FF              2095 	addc	a,#0xff
   03AB CB                 2096 	xch	a,r3
   03AC 25 E0              2097 	add	a,acc
   03AE CB                 2098 	xch	a,r3
   03AF 33                 2099 	rlc	a
   03B0 CB                 2100 	xch	a,r3
   03B1 25 E0              2101 	add	a,acc
   03B3 CB                 2102 	xch	a,r3
   03B4 33                 2103 	rlc	a
   03B5 FC                 2104 	mov	r4,a
   03B6 74 36              2105 	mov	a,#0x36
   03B8 2B                 2106 	add	a,r3
   03B9 FB                 2107 	mov	r3,a
   03BA E4                 2108 	clr	a
   03BB 3C                 2109 	addc	a,r4
   03BC FF                 2110 	mov	r7,a
   03BD 80 16              2111 	sjmp	00132$
   03BF                    2112 00111$:
                    03BF   2113 	C$dm9000.c$358$1$1 ==.
                           2114 ;	..\driver\dm9000.c:358: else if (uip_buf[UIP_LLH_LEN + 9] == UIP_PROTO_ICMP)
   03BF BA 01 06           2115 	cjne	r2,#0x01,00108$
                    03C2   2116 	C$dm9000.c$359$1$1 ==.
                           2117 ;	..\driver\dm9000.c:359: j = (UIP_LLH_LEN + UIP_TCPIP_HLEN);
   03C2 7B 36              2118 	mov	r3,#0x36
   03C4 7F 00              2119 	mov	r7,#0x00
   03C6 80 0D              2120 	sjmp	00132$
   03C8                    2121 00108$:
                    03C8   2122 	C$dm9000.c$360$1$1 ==.
                           2123 ;	..\driver\dm9000.c:360: else if (uip_buf[UIP_LLH_LEN + 9] == UIP_PROTO_UDP)
   03C8 BA 11 06           2124 	cjne	r2,#0x11,00105$
                    03CB   2125 	C$dm9000.c$361$1$1 ==.
                           2126 ;	..\driver\dm9000.c:361: j = (UIP_LLH_LEN + UIP_TCPIP_HLEN);
   03CB 7B 36              2127 	mov	r3,#0x36
   03CD 7F 00              2128 	mov	r7,#0x00
   03CF 80 04              2129 	sjmp	00132$
   03D1                    2130 00105$:
                    03D1   2131 	C$dm9000.c$363$1$1 ==.
                           2132 ;	..\driver\dm9000.c:363: j = (UIP_LLH_LEN + UIP_TCPIP_HLEN);
   03D1 7B 36              2133 	mov	r3,#0x36
   03D3 7F 00              2134 	mov	r7,#0x00
                    03D5   2135 	C$dm9000.c$365$1$1 ==.
                           2136 ;	..\driver\dm9000.c:365: for (i = 0; i < j; i++)
   03D5                    2137 00132$:
   03D5 7Ar00              2138 	mov	r2,#_uip_buf
   03D7 7Ds00              2139 	mov	r5,#(_uip_buf >> 8)
   03D9 7E 00              2140 	mov	r6,#0x00
   03DB 78r02              2141 	mov	r0,#_DM9000_transmit_i_1_1
   03DD E4                 2142 	clr	a
   03DE F6                 2143 	mov	@r0,a
   03DF 08                 2144 	inc	r0
   03E0 F6                 2145 	mov	@r0,a
   03E1                    2146 00116$:
   03E1 78r02              2147 	mov	r0,#_DM9000_transmit_i_1_1
   03E3 C3                 2148 	clr	c
   03E4 E6                 2149 	mov	a,@r0
   03E5 9B                 2150 	subb	a,r3
   03E6 08                 2151 	inc	r0
   03E7 E6                 2152 	mov	a,@r0
   03E8 9F                 2153 	subb	a,r7
   03E9 50 32              2154 	jnc	00137$
                    03EB   2155 	C$dm9000.c$367$2$2 ==.
                           2156 ;	..\driver\dm9000.c:367: write_nicdata(*ptr++); // write header data to transmit SRAM
   03EB 8A 82              2157 	mov	dpl,r2
   03ED 8D 83              2158 	mov	dph,r5
   03EF 8E F0              2159 	mov	b,r6
   03F1 12s00r00           2160 	lcall	__gptrget
   03F4 FC                 2161 	mov	r4,a
   03F5 A3                 2162 	inc	dptr
   03F6 AA 82              2163 	mov	r2,dpl
   03F8 AD 83              2164 	mov	r5,dph
   03FA 8C 82              2165 	mov	dpl,r4
   03FC C0 02              2166 	push	ar2
   03FE C0 03              2167 	push	ar3
   0400 C0 05              2168 	push	ar5
   0402 C0 06              2169 	push	ar6
   0404 C0 07              2170 	push	ar7
   0406 12s00r1B           2171 	lcall	_write_nicdata
   0409 D0 07              2172 	pop	ar7
   040B D0 06              2173 	pop	ar6
   040D D0 05              2174 	pop	ar5
   040F D0 03              2175 	pop	ar3
   0411 D0 02              2176 	pop	ar2
                    0413   2177 	C$dm9000.c$365$1$1 ==.
                           2178 ;	..\driver\dm9000.c:365: for (i = 0; i < j; i++)
   0413 78r02              2179 	mov	r0,#_DM9000_transmit_i_1_1
   0415 06                 2180 	inc	@r0
   0416 B6 00 C8           2181 	cjne	@r0,#0x00,00116$
   0419 08                 2182 	inc	r0
   041A 06                 2183 	inc	@r0
   041B 80 C4              2184 	sjmp	00116$
   041D                    2185 00137$:
   041D 78r02              2186 	mov	r0,#_DM9000_transmit_i_1_1
   041F 86 02              2187 	mov	ar2,@r0
   0421 08                 2188 	inc	r0
   0422 86 04              2189 	mov	ar4,@r0
                    0424   2190 	C$dm9000.c$372$1$1 ==.
                           2191 ;	..\driver\dm9000.c:372: if (i < uip_len && j != 42)
   0424 90s00r00           2192 	mov	dptr,#_uip_len
   0427 E0                 2193 	movx	a,@dptr
   0428 FD                 2194 	mov	r5,a
   0429 A3                 2195 	inc	dptr
   042A E0                 2196 	movx	a,@dptr
   042B FE                 2197 	mov	r6,a
   042C 78r02              2198 	mov	r0,#_DM9000_transmit_i_1_1
   042E C3                 2199 	clr	c
   042F E6                 2200 	mov	a,@r0
   0430 9D                 2201 	subb	a,r5
   0431 08                 2202 	inc	r0
   0432 E6                 2203 	mov	a,@r0
   0433 9E                 2204 	subb	a,r6
   0434 50 5B              2205 	jnc	00114$
   0436 BB 2A 05           2206 	cjne	r3,#0x2A,00148$
   0439 BF 00 02           2207 	cjne	r7,#0x00,00148$
   043C 80 53              2208 	sjmp	00114$
   043E                    2209 00148$:
                    043E   2210 	C$dm9000.c$374$2$3 ==.
                           2211 ;	..\driver\dm9000.c:374: for (ptr = uip_appdata; (i < uip_len) ; i++)
   043E 90s00r00           2212 	mov	dptr,#_uip_appdata
   0441 E0                 2213 	movx	a,@dptr
   0442 FD                 2214 	mov	r5,a
   0443 A3                 2215 	inc	dptr
   0444 E0                 2216 	movx	a,@dptr
   0445 FE                 2217 	mov	r6,a
   0446 A3                 2218 	inc	dptr
   0447 E0                 2219 	movx	a,@dptr
   0448 FB                 2220 	mov	r3,a
   0449 8D*00              2221 	mov	_DM9000_transmit_sloc0_1_0,r5
   044B 8E*01              2222 	mov	(_DM9000_transmit_sloc0_1_0 + 1),r6
   044D 8B*02              2223 	mov	(_DM9000_transmit_sloc0_1_0 + 2),r3
   044F 78r02              2224 	mov	r0,#_DM9000_transmit_i_1_1
   0451 86 07              2225 	mov	ar7,@r0
   0453 08                 2226 	inc	r0
   0454 86 03              2227 	mov	ar3,@r0
   0456                    2228 00120$:
   0456 90s00r00           2229 	mov	dptr,#_uip_len
   0459 E0                 2230 	movx	a,@dptr
   045A FD                 2231 	mov	r5,a
   045B A3                 2232 	inc	dptr
   045C E0                 2233 	movx	a,@dptr
   045D FE                 2234 	mov	r6,a
   045E C3                 2235 	clr	c
   045F EF                 2236 	mov	a,r7
   0460 9D                 2237 	subb	a,r5
   0461 EB                 2238 	mov	a,r3
   0462 9E                 2239 	subb	a,r6
   0463 50 28              2240 	jnc	00138$
                    0465   2241 	C$dm9000.c$376$3$4 ==.
                           2242 ;	..\driver\dm9000.c:376: write_nicdata(*ptr++); // write data to transmit SRAM
   0465 85*00 82           2243 	mov	dpl,_DM9000_transmit_sloc0_1_0
   0468 85*01 83           2244 	mov	dph,(_DM9000_transmit_sloc0_1_0 + 1)
   046B 85*02 F0           2245 	mov	b,(_DM9000_transmit_sloc0_1_0 + 2)
   046E 12s00r00           2246 	lcall	__gptrget
   0471 FD                 2247 	mov	r5,a
   0472 A3                 2248 	inc	dptr
   0473 85 82*00           2249 	mov	_DM9000_transmit_sloc0_1_0,dpl
   0476 85 83*01           2250 	mov	(_DM9000_transmit_sloc0_1_0 + 1),dph
   0479 8D 82              2251 	mov	dpl,r5
   047B C0 03              2252 	push	ar3
   047D C0 07              2253 	push	ar7
   047F 12s00r1B           2254 	lcall	_write_nicdata
   0482 D0 07              2255 	pop	ar7
   0484 D0 03              2256 	pop	ar3
                    0486   2257 	C$dm9000.c$374$2$3 ==.
                           2258 ;	..\driver\dm9000.c:374: for (ptr = uip_appdata; (i < uip_len) ; i++)
   0486 0F                 2259 	inc	r7
   0487 BF 00 CC           2260 	cjne	r7,#0x00,00120$
   048A 0B                 2261 	inc	r3
   048B 80 C9              2262 	sjmp	00120$
   048D                    2263 00138$:
   048D 8F 02              2264 	mov	ar2,r7
   048F 8B 04              2265 	mov	ar4,r3
   0491                    2266 00114$:
                    0491   2267 	C$dm9000.c$382$1$1 ==.
                           2268 ;	..\driver\dm9000.c:382: write_nicreg(DM9000_TXPLH,(u8_t)(i >> 8));
   0491 90s00r00           2269 	mov	dptr,#_write_nicreg_PARM_2
   0494 EC                 2270 	mov	a,r4
   0495 F0                 2271 	movx	@dptr,a
   0496 75 82 FD           2272 	mov	dpl,#0xFD
   0499 C0 02              2273 	push	ar2
   049B C0 04              2274 	push	ar4
   049D 12s00r00           2275 	lcall	_write_nicreg
   04A0 D0 04              2276 	pop	ar4
   04A2 D0 02              2277 	pop	ar2
                    04A4   2278 	C$dm9000.c$384$1$1 ==.
                           2279 ;	..\driver\dm9000.c:384: write_nicreg(DM9000_TXPLL,(u8_t)(i));
   04A4 90s00r00           2280 	mov	dptr,#_write_nicreg_PARM_2
   04A7 EA                 2281 	mov	a,r2
   04A8 F0                 2282 	movx	@dptr,a
   04A9 75 82 FC           2283 	mov	dpl,#0xFC
   04AC 12s00r00           2284 	lcall	_write_nicreg
                    04AF   2285 	C$dm9000.c$388$1$1 ==.
                           2286 ;	..\driver\dm9000.c:388: write_nicreg(DM9000_TCR, 1);
   04AF 90s00r00           2287 	mov	dptr,#_write_nicreg_PARM_2
   04B2 74 01              2288 	mov	a,#0x01
   04B4 F0                 2289 	movx	@dptr,a
   04B5 75 82 02           2290 	mov	dpl,#0x02
                    04B8   2291 	C$dm9000.c$389$1$1 ==.
                    04B8   2292 	XG$DM9000_transmit$0$0 ==.
   04B8 02s00r00           2293 	ljmp	_write_nicreg
                           2294 	.area CSEG    (CODE)
                           2295 	.area CONST   (CODE)
                           2296 	.area XINIT   (CODE)
                           2297 	.area CABS    (ABS,CODE)
