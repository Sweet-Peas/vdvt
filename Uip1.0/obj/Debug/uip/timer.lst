                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.8.0 #5117 (Mar 23 2008) (MINGW32)
                              4 ; This file was generated Sun Jan 30 19:17:38 2011
                              5 ;--------------------------------------------------------
                              6 	.module timer
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _timer_set
                             13 	.globl _timer_reset
                             14 	.globl _timer_restart
                             15 	.globl _timer_expired
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (DATA)
                             20 ;--------------------------------------------------------
                             21 ; special function bits
                             22 ;--------------------------------------------------------
                             23 	.area RSEG    (DATA)
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area OSEG    (OVR,DATA)
                             37 ;--------------------------------------------------------
                             38 ; indirectly addressable internal ram data
                             39 ;--------------------------------------------------------
                             40 	.area ISEG    (DATA)
                             41 ;--------------------------------------------------------
                             42 ; absolute internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS,DATA)
                             45 	.area IABS    (ABS,DATA)
                             46 ;--------------------------------------------------------
                             47 ; bit data
                             48 ;--------------------------------------------------------
                             49 	.area BSEG    (BIT)
                             50 ;--------------------------------------------------------
                             51 ; paged external ram data
                             52 ;--------------------------------------------------------
                             53 	.area PSEG    (PAG,XDATA)
                             54 ;--------------------------------------------------------
                             55 ; external ram data
                             56 ;--------------------------------------------------------
                             57 	.area XSEG    (XDATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XABS    (ABS,XDATA)
                             62 ;--------------------------------------------------------
                             63 ; external initialized ram data
                             64 ;--------------------------------------------------------
                             65 	.area XISEG   (XDATA)
                             66 	.area HOME    (CODE)
                             67 	.area GSINIT0 (CODE)
                             68 	.area GSINIT1 (CODE)
                             69 	.area GSINIT2 (CODE)
                             70 	.area GSINIT3 (CODE)
                             71 	.area GSINIT4 (CODE)
                             72 	.area GSINIT5 (CODE)
                             73 	.area GSINIT  (CODE)
                             74 	.area GSFINAL (CODE)
                             75 	.area CSEG    (CODE)
                             76 ;--------------------------------------------------------
                             77 ; global & static initialisations
                             78 ;--------------------------------------------------------
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT  (CODE)
                             81 	.area GSFINAL (CODE)
                             82 	.area GSINIT  (CODE)
                             83 ;--------------------------------------------------------
                             84 ; Home
                             85 ;--------------------------------------------------------
                             86 	.area HOME    (CODE)
                             87 	.area HOME    (CODE)
                             88 ;--------------------------------------------------------
                             89 ; code
                             90 ;--------------------------------------------------------
                             91 	.area UIP_BANK(CODE)
                             92 ;------------------------------------------------------------
                             93 ;Allocation info for local variables in function 'timer_set'
                             94 ;------------------------------------------------------------
                             95 ;interval                  Allocated to stack - offset -4
                             96 ;t                         Allocated to registers r2 r3 r4 
                             97 ;------------------------------------------------------------
                    0000     98 	G$timer_set$0$0 ==.
                    0000     99 	C$timer.c$67$0$0 ==.
                            100 ;	..\uip\timer.c:67: timer_set(struct timer *t, clock_time_t interval)  __reentrant banked
                            101 ;	-----------------------------------------
                            102 ;	 function timer_set
                            103 ;	-----------------------------------------
   0000                     104 _timer_set:
                    0002    105 	ar2 = 0x02
                    0003    106 	ar3 = 0x03
                    0004    107 	ar4 = 0x04
                    0005    108 	ar5 = 0x05
                    0006    109 	ar6 = 0x06
                    0007    110 	ar7 = 0x07
                    0000    111 	ar0 = 0x00
                    0001    112 	ar1 = 0x01
   0000 C0*00               113 	push	_bp
   0002 85 81*00            114 	mov	_bp,sp
   0005 AA 82               115 	mov	r2,dpl
   0007 AB 83               116 	mov	r3,dph
   0009 AC F0               117 	mov	r4,b
                    000B    118 	C$timer.c$69$1$1 ==.
                            119 ;	..\uip\timer.c:69: t->interval = interval;
   000B 74 02               120 	mov	a,#0x02
   000D 2A                  121 	add	a,r2
   000E FD                  122 	mov	r5,a
   000F E4                  123 	clr	a
   0010 3B                  124 	addc	a,r3
   0011 FE                  125 	mov	r6,a
   0012 8C 07               126 	mov	ar7,r4
   0014 8D 82               127 	mov	dpl,r5
   0016 8E 83               128 	mov	dph,r6
   0018 8F F0               129 	mov	b,r7
   001A E5*00               130 	mov	a,_bp
   001C 24 FC               131 	add	a,#0xfc
   001E F8                  132 	mov	r0,a
   001F E6                  133 	mov	a,@r0
   0020 12s00r00            134 	lcall	__gptrput
   0023 A3                  135 	inc	dptr
   0024 08                  136 	inc	r0
   0025 E6                  137 	mov	a,@r0
   0026 12s00r00            138 	lcall	__gptrput
                    0029    139 	C$timer.c$70$1$1 ==.
                            140 ;	..\uip\timer.c:70: t->start = clock_time();
   0029 C0 02               141 	push	ar2
   002B C0 03               142 	push	ar3
   002D C0 04               143 	push	ar4
   002F 12s00r00            144 	lcall	_clock_time
   0032 AD 82               145 	mov	r5,dpl
   0034 AE 83               146 	mov	r6,dph
   0036 D0 04               147 	pop	ar4
   0038 D0 03               148 	pop	ar3
   003A D0 02               149 	pop	ar2
   003C 8A 82               150 	mov	dpl,r2
   003E 8B 83               151 	mov	dph,r3
   0040 8C F0               152 	mov	b,r4
   0042 ED                  153 	mov	a,r5
   0043 12s00r00            154 	lcall	__gptrput
   0046 A3                  155 	inc	dptr
   0047 EE                  156 	mov	a,r6
   0048 12s00r00            157 	lcall	__gptrput
   004B D0*00               158 	pop	_bp
                    004D    159 	C$timer.c$71$1$1 ==.
                    004D    160 	XG$timer_set$0$0 ==.
   004D 02s00r00            161 	ljmp	__sdcc_banked_ret
                            162 ;------------------------------------------------------------
                            163 ;Allocation info for local variables in function 'timer_reset'
                            164 ;------------------------------------------------------------
                            165 ;t                         Allocated to registers r2 r3 r4 
                            166 ;------------------------------------------------------------
                    0050    167 	G$timer_reset$0$0 ==.
                    0050    168 	C$timer.c$87$1$1 ==.
                            169 ;	..\uip\timer.c:87: timer_reset(struct timer *t) __reentrant banked
                            170 ;	-----------------------------------------
                            171 ;	 function timer_reset
                            172 ;	-----------------------------------------
   0050                     173 _timer_reset:
                    0050    174 	C$timer.c$89$1$1 ==.
                            175 ;	..\uip\timer.c:89: t->start += t->interval;
   0050 AA 82               176 	mov	r2,dpl
   0052 AB 83               177 	mov	r3,dph
   0054 AC F0               178 	mov	r4,b
   0056 12s00r00            179 	lcall	__gptrget
   0059 FD                  180 	mov	r5,a
   005A A3                  181 	inc	dptr
   005B 12s00r00            182 	lcall	__gptrget
   005E FE                  183 	mov	r6,a
   005F 74 02               184 	mov	a,#0x02
   0061 2A                  185 	add	a,r2
   0062 FF                  186 	mov	r7,a
   0063 E4                  187 	clr	a
   0064 3B                  188 	addc	a,r3
   0065 F8                  189 	mov	r0,a
   0066 8C 01               190 	mov	ar1,r4
   0068 8F 82               191 	mov	dpl,r7
   006A 88 83               192 	mov	dph,r0
   006C 89 F0               193 	mov	b,r1
   006E 12s00r00            194 	lcall	__gptrget
   0071 FF                  195 	mov	r7,a
   0072 A3                  196 	inc	dptr
   0073 12s00r00            197 	lcall	__gptrget
   0076 F8                  198 	mov	r0,a
   0077 EF                  199 	mov	a,r7
   0078 2D                  200 	add	a,r5
   0079 FD                  201 	mov	r5,a
   007A E8                  202 	mov	a,r0
   007B 3E                  203 	addc	a,r6
   007C FE                  204 	mov	r6,a
   007D 8A 82               205 	mov	dpl,r2
   007F 8B 83               206 	mov	dph,r3
   0081 8C F0               207 	mov	b,r4
   0083 ED                  208 	mov	a,r5
   0084 12s00r00            209 	lcall	__gptrput
   0087 A3                  210 	inc	dptr
   0088 EE                  211 	mov	a,r6
   0089 12s00r00            212 	lcall	__gptrput
                    008C    213 	C$timer.c$90$1$1 ==.
                    008C    214 	XG$timer_reset$0$0 ==.
   008C 02s00r00            215 	ljmp	__sdcc_banked_ret
                            216 ;------------------------------------------------------------
                            217 ;Allocation info for local variables in function 'timer_restart'
                            218 ;------------------------------------------------------------
                            219 ;t                         Allocated to registers r2 r3 r4 
                            220 ;------------------------------------------------------------
                    008F    221 	G$timer_restart$0$0 ==.
                    008F    222 	C$timer.c$107$1$1 ==.
                            223 ;	..\uip\timer.c:107: timer_restart(struct timer *t) __reentrant banked
                            224 ;	-----------------------------------------
                            225 ;	 function timer_restart
                            226 ;	-----------------------------------------
   008F                     227 _timer_restart:
   008F AA 82               228 	mov	r2,dpl
   0091 AB 83               229 	mov	r3,dph
   0093 AC F0               230 	mov	r4,b
                    0095    231 	C$timer.c$109$1$1 ==.
                            232 ;	..\uip\timer.c:109: t->start = clock_time();
   0095 C0 02               233 	push	ar2
   0097 C0 03               234 	push	ar3
   0099 C0 04               235 	push	ar4
   009B 12s00r00            236 	lcall	_clock_time
   009E AD 82               237 	mov	r5,dpl
   00A0 AE 83               238 	mov	r6,dph
   00A2 D0 04               239 	pop	ar4
   00A4 D0 03               240 	pop	ar3
   00A6 D0 02               241 	pop	ar2
   00A8 8A 82               242 	mov	dpl,r2
   00AA 8B 83               243 	mov	dph,r3
   00AC 8C F0               244 	mov	b,r4
   00AE ED                  245 	mov	a,r5
   00AF 12s00r00            246 	lcall	__gptrput
   00B2 A3                  247 	inc	dptr
   00B3 EE                  248 	mov	a,r6
   00B4 12s00r00            249 	lcall	__gptrput
                    00B7    250 	C$timer.c$110$1$1 ==.
                    00B7    251 	XG$timer_restart$0$0 ==.
   00B7 02s00r00            252 	ljmp	__sdcc_banked_ret
                            253 ;------------------------------------------------------------
                            254 ;Allocation info for local variables in function 'timer_expired'
                            255 ;------------------------------------------------------------
                            256 ;t                         Allocated to registers r2 r3 r4 
                            257 ;------------------------------------------------------------
                    00BA    258 	G$timer_expired$0$0 ==.
                    00BA    259 	C$timer.c$124$1$1 ==.
                            260 ;	..\uip\timer.c:124: timer_expired(struct timer *t) __reentrant banked
                            261 ;	-----------------------------------------
                            262 ;	 function timer_expired
                            263 ;	-----------------------------------------
   00BA                     264 _timer_expired:
   00BA AA 82               265 	mov	r2,dpl
   00BC AB 83               266 	mov	r3,dph
   00BE AC F0               267 	mov	r4,b
                    00C0    268 	C$timer.c$126$1$1 ==.
                            269 ;	..\uip\timer.c:126: return (clock_time_t)(clock_time() - t->start) >= (clock_time_t)t->interval;
   00C0 C0 02               270 	push	ar2
   00C2 C0 03               271 	push	ar3
   00C4 C0 04               272 	push	ar4
   00C6 12s00r00            273 	lcall	_clock_time
   00C9 AD 82               274 	mov	r5,dpl
   00CB AE 83               275 	mov	r6,dph
   00CD D0 04               276 	pop	ar4
   00CF D0 03               277 	pop	ar3
   00D1 D0 02               278 	pop	ar2
   00D3 8A 82               279 	mov	dpl,r2
   00D5 8B 83               280 	mov	dph,r3
   00D7 8C F0               281 	mov	b,r4
   00D9 12s00r00            282 	lcall	__gptrget
   00DC FF                  283 	mov	r7,a
   00DD A3                  284 	inc	dptr
   00DE 12s00r00            285 	lcall	__gptrget
   00E1 F8                  286 	mov	r0,a
   00E2 ED                  287 	mov	a,r5
   00E3 C3                  288 	clr	c
   00E4 9F                  289 	subb	a,r7
   00E5 FD                  290 	mov	r5,a
   00E6 EE                  291 	mov	a,r6
   00E7 98                  292 	subb	a,r0
   00E8 FE                  293 	mov	r6,a
   00E9 74 02               294 	mov	a,#0x02
   00EB 2A                  295 	add	a,r2
   00EC FA                  296 	mov	r2,a
   00ED E4                  297 	clr	a
   00EE 3B                  298 	addc	a,r3
   00EF FB                  299 	mov	r3,a
   00F0 8A 82               300 	mov	dpl,r2
   00F2 8B 83               301 	mov	dph,r3
   00F4 8C F0               302 	mov	b,r4
   00F6 12s00r00            303 	lcall	__gptrget
   00F9 FA                  304 	mov	r2,a
   00FA A3                  305 	inc	dptr
   00FB 12s00r00            306 	lcall	__gptrget
   00FE FB                  307 	mov	r3,a
   00FF C3                  308 	clr	c
   0100 ED                  309 	mov	a,r5
   0101 9A                  310 	subb	a,r2
   0102 EE                  311 	mov	a,r6
   0103 64 80               312 	xrl	a,#0x80
   0105 8B F0               313 	mov	b,r3
   0107 63 F0 80            314 	xrl	b,#0x80
   010A 95 F0               315 	subb	a,b
   010C B3                  316 	cpl	c
   010D E4                  317 	clr	a
   010E 33                  318 	rlc	a
   010F FD                  319 	mov	r5,a
   0110 7A 00               320 	mov	r2,#0x00
   0112 8D 82               321 	mov	dpl,r5
   0114 8A 83               322 	mov	dph,r2
                    0116    323 	C$timer.c$127$1$1 ==.
                    0116    324 	XG$timer_expired$0$0 ==.
   0116 02s00r00            325 	ljmp	__sdcc_banked_ret
                            326 	.area CSEG    (CODE)
                            327 	.area CONST   (CODE)
                            328 	.area XINIT   (CODE)
                            329 	.area CABS    (ABS,CODE)
